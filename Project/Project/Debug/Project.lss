
AVRASM ver. 2.2.6  C:\Users\Rhys\OneDrive\UNSW\Y3Sem1\COMP2121\COMP2121Project\Project\Project\main.asm Thu Jun 01 11:01:21 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Rhys\OneDrive\UNSW\Y3Sem1\COMP2121\COMP2121Project\Project\Project\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Rhys\OneDrive\UNSW\Y3Sem1\COMP2121\COMP2121Project\Project\Project\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Project.asm
                                 ;
                                 ; Created: 24/05/2017 10:55:30 AM
                                 ; Author : Rhys
                                 ;
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;General - notify other member if change any of these
                                 .def temp1 = r16
                                 .def temp2 = r17
                                 .def star_pressed = r12
                                 .def second_counter = r10
                                 .def current_item = r11
                                 .def new_screen_flag = r23
                                 .def current_screen	=r22	;to keep track of what screen we are currently on where 0: start screen, 1: Select Screen, 2: Empty Screen, 3: Coin Screen, 4: Deliver Screen, 5: Admin Screen
                                 .def row = r24
                                 .def col = r25
                                 .def rmask = r18
                                 .def cmask = r19
                                 .def debounceFlag0 = r20
                                 .def debounceFlag1 = r21
                                 .def tempcount = r13
                                 .def tempcost = r14
                                 .def address = r15
                                 .def coins_needed = r9
                                 .def new_star_flag = r8
                                 .def interrupt_counter = r7
                                 .def adc_L = r4
                                 .def adc_H = r5
                                 
                                 
                                 ;Constants----------------------------
                                 
                                 ;Delay Constants
                                 .equ F_CPU = 16000000                               ; 16MHz
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4 				; 4 cycles per iteration - setup/call-return overhead
                                 
                                 ;Keypad Constants
                                 .equ PORTLDIR = 0xF0								;PD7-4: output, PD3-0, input
                                 .equ INITCOLMASK = 0xEF								; scan from the rightmost column,
                                 .equ INITROWMASK = 0x01								; scan from the top row
                                 .equ ROWMASK = 0x0F									; for obtaining input from Port D
                                 
                                 ; LCD Instructions
                                 ;As plugged into our board
                                 .equ LCD_RS = 7										; Register Select				
                                 .equ LCD_E = 6										;Enable pin - Operation start signal for data read/write
                                 .equ LCD_RW = 5										;Signal to select Read or Write  ["0": Write; "1": Read]
                                 .equ LCD_BE = 4
                                 
                                 .set LCD_DISP_ON = 0b00001110
                                 .set LCD_DISP_OFF = 0b00001000
                                 .set LCD_DISP_CLR = 0b00000001
                                 .set LCD_FUNC_SET = 0b00111000 						; 2 lines, 5 by 7 characters
                                 .set LCD_ENTR_SET = 0b00000110 						; increment, no display shift
                                 .set LCD_HOME_LINE = 0b10000000 					; goes to 1st line (address 0)
                                 .set LCD_SEC_LINE = 0b10101000 						; goes to 2nd line (address 40)
                                 
                                 ;Macros-------------------------------------------------------------------
                                 
                                 .macro clear
                                 	push temp1
                                 	ldi YL, low(@0)     ; load the memory address to Y
                                     ldi YH, high(@0)
                                     clr temp1 
                                     st Y+, temp1        ; clear the two bytes at @0 in SRAM
                                     st Y, temp1
                                 	pop temp1
                                 .endmacro
                                 
                                 ; LCD Macros-----------------
                                 
                                 .macro do_lcd_command
                                 	ldi temp1, @0										;saves to temp1
                                 	rcall lcd_command								;goes to LCD Command macro 
                                 	rcall lcd_wait									; wait... LCD is slow
                                 .endmacro
                                 
                                 .macro do_lcd_command_reg
                                 	mov temp1, @0										; saves t0 temp1
                                 	rcall lcd_command								; goes to LCD data macro
                                 	rcall lcd_wait									; wait ... LCD is slow
                                 .endmacro
                                 
                                 .macro do_lcd_data
                                 	ldi temp1, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_data_reg
                                 	mov temp1, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro lcd_set
                                 	sbi PORTA, @0									;set bit in I/O register
                                 .endmacro
                                 
                                 .macro lcd_clr
                                 	cbi PORTA, @0									; clear bit in I?O register
                                 .endmacro
                                 
                                 ;DSEG and CSEG ---------------------------------------------------------
                                 .dseg 
000200                           	TempCounter: .byte 2
000202                           	TempCounter1: .byte 2
000204                           	DebounceCounter: .byte 2	;Used to determine if 50ms has passed for push button pressing
000206                           	Item1: .byte 2				;Item stores where first byte is the inventory count and the second byte is the coin cost 
000208                           	Item2: .byte 2				;Coin cost accessed by eg Item1+1
00020a                           	Item3: .byte 2
00020c                           	Item4: .byte 2
00020e                           	Item5: .byte 2
000210                           	Item6: .byte 2
000212                           	Item7: .byte 2
000214                           	Item8: .byte 2
000216                           	Item9: .byte 2
000218                           	currPress: .byte 1
000219                           	wasPress: .byte 1
                                 
                                 .cseg
                                 .org 0x0000
000000 940c 003f                 	jmp RESET
                                 .org INT0addr
000002 940c 00f7                 	jmp EXT_INT0		;Handling for IRQ0 (button pushed)
000004 940c 010c                 	jmp EXT_INT1	;Handling for IRQ1 (button pushed)
                                 
000006 940c 003e                 	jmp DEFAULT
000008 940c 003e                 	jmp DEFAULT
00000a 940c 003e                 	jmp DEFAULT    ;Handling for Potentiometer
00000c 940c 003e                 	jmp DEFAULT		;Handling for IRQ2
                                 .org OVF0addr
00002e 940c 012a                 	jmp Timer0OVF	;Handling for Timer 0 overflow
                                 .org OVF1addr
000028 940c 0498                 	jmp Timer1OVF	;Handling for Timer 1 overflow
                                 .org ADCCADDR
00003a 940c 03fe                 	jmp ADC_ISR
00003c 940c 003e                 jmp DEFAULT			;Handling for all other interrupts
                                 
                                 ;DEFAULT AND RESET --------------------------------------------
00003e 9518                      DEFAULT: reti
                                 
                                 RESET:
                                 	;Stack Pointer initialisation
00003f ef0f                      	ldi temp1, low(RAMEND)
000040 bf0d                      	out SPL, temp1
000041 e201                      	ldi temp1, high(RAMEND)
000042 bf0e                      	out SPH, temp1
                                 
                                 	;Keypad
000043 ef00                      	ldi temp1, PORTLDIR ; PL7:4/PL3:0, out/in
000044 9300 010a                 	sts DDRL, temp1	
                                 
000046 2700                      	clr temp1
000047 9300 0218                 	sts currPress, temp1
000049 9300 0219                 	sts wasPress, temp1
                                 
                                 	;LEDs
00004b ef0f                      	ser temp1	;set PORTC (LEDs) as output
00004c b907                      	out DDRC, temp1
00004d ef0f                      	ser temp1	;set PG2 and PG3 as output (the other LEDs)
00004e bb03                      	out DDRG, temp1
                                 
                                 	;Button interrupt
00004f 930f
000050 e0c4
000051 e0d2
000052 2700
000053 9309
000054 8308
000055 910f                      	clear DebounceCounter
000056 2744                      	clr DebounceFlag0
000057 2755                      	clr DebounceFlag1
000058 e001                      	ldi temp1, 1
000059 2eb0                      	mov current_item, temp1
                                 
00005a 9478                      	sei
                                 
                                 
00005b e002                      	ldi temp1, (2<<ISC00)	;set INT0 as falling-edge interrupt
00005c 9300 0069                 	sts EICRA, temp1
00005e b30d                      	in temp1, EIMSK	;enable INT0
00005f 6001                      	ori temp1, (1<<INT0)
000060 bb0d                      	out EIMSK, temp1
                                 
000061 9478                      	sei
                                 
000062 e008                      	ldi temp1, (2<<ISC10)	;set INT1 as falling-edge interrupt
000063 9300 0069                 	sts EICRA, temp1
000065 b30d                      	in temp1, EIMSK			;enable INT1
000066 6002                      	ori temp1, (1<<INT1)
000067 bb0d                      	out EIMSK, temp1
                                 	
000068 9478                      	sei
                                 
                                 	;Timer Interrupt
000069 930f
00006a e0c0
00006b e0d2
00006c 2700
00006d 9309
00006e 8308
00006f 910f                      	clear TempCounter
000070 930f
000071 e0c2
000072 e0d2
000073 2700
000074 9309
000075 8308
000076 910f                      	clear TempCounter1
                                 	
000077 e000                      	ldi temp1, 0b00000000
000078 bd04                      	out TCCR0A, temp1
000079 e002                      	ldi temp1, (2<<CS00)	;set prescaler to 8 = 128 ms
00007a bd05                      	out TCCR0B, temp1
00007b e001                      	ldi temp1, (1<<TOIE0)
00007c 9300 006e                 	sts TIMSK0, temp1
                                 	
00007e 9478                      	sei 
                                 
                                 	;LCD
00007f ef0f                      	ser temp1
000080 bb00                      	out DDRF, temp1			;set PORTF(LCD Data) and PORTA(LCD Control) to output
000081 b901                      	out DDRA, temp1
000082 2700                      	clr temp1				;clear PORTF and PORTA registers
000083 bb01                      	out PORTF, temp1
000084 b902                      	out PORTA, temp1
                                 
000085 e308
000086 d205
000087 d214                      	do_lcd_command LCD_FUNC_SET 					; initialise LCD
000088 d22d                      	rcall sleep_5ms
000089 e308
00008a d201
00008b d210                      	do_lcd_command LCD_FUNC_SET
00008c d220                      	rcall sleep_1ms
                                 
00008d e308
00008e d1fd
00008f d20c                      	do_lcd_command LCD_FUNC_SET
000090 e308
000091 d1fa
000092 d209                      	do_lcd_command LCD_FUNC_SET
000093 e008
000094 d1f7
000095 d206                      	do_lcd_command LCD_DISP_OFF
000096 e001
000097 d1f4
000098 d203                      	do_lcd_command LCD_DISP_CLR
000099 e006
00009a d1f1
00009b d200                      	do_lcd_command LCD_ENTR_SET
00009c e00e
00009d d1ee
00009e d1fd                      	do_lcd_command LCD_DISP_ON  
                                 
                                 	;Item counts
00009f 930f
0000a0 e0c6
0000a1 e0d2
0000a2 2700
0000a3 9309
0000a4 8308
0000a5 910f                      	clear Item1
0000a6 930f
0000a7 e0c8
0000a8 e0d2
0000a9 2700
0000aa 9309
0000ab 8308
0000ac 910f                      	clear Item2
0000ad 930f
0000ae e0ca
0000af e0d2
0000b0 2700
0000b1 9309
0000b2 8308
0000b3 910f                      	clear Item3
0000b4 930f
0000b5 e0cc
0000b6 e0d2
0000b7 2700
0000b8 9309
0000b9 8308
0000ba 910f                      	clear Item4
0000bb 930f
0000bc e0ce
0000bd e0d2
0000be 2700
0000bf 9309
0000c0 8308
0000c1 910f                      	clear Item5
0000c2 930f
0000c3 e1c0
0000c4 e0d2
0000c5 2700
0000c6 9309
0000c7 8308
0000c8 910f                      	clear Item6
0000c9 930f
0000ca e1c2
0000cb e0d2
0000cc 2700
0000cd 9309
0000ce 8308
0000cf 910f                      	clear Item7
0000d0 930f
0000d1 e1c4
0000d2 e0d2
0000d3 2700
0000d4 9309
0000d5 8308
0000d6 910f                      	clear Item8
0000d7 930f
0000d8 e1c6
0000d9 e0d2
0000da 2700
0000db 9309
0000dc 8308
0000dd 910f                      	clear Item9
                                 
                                 	;Keypad
                                 	;Potentiometer - connected to PK2
0000de 9478                      	sei
                                 	;initialise to read 
0000df ec00                      	ldi temp1, (3<<REFS0)|(0<<ADLAR)|(0<<MUX0)
0000e0 9300 007c                 	sts ADMUX, temp1
0000e2 e008                      	ldi temp1, (1<<MUX5)
0000e3 9300 007b                 	sts ADCSRB, temp1
0000e5 ec0d                      	ldi temp1, (1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(5<<ADPS0) 
0000e6 9300 007a                 	sts ADCSRA, temp1
                                 	
0000e8 2499                      	clr coins_needed
0000e9 2477                      	clr interrupt_counter
                                 
                                 	;motor
0000ea 9478                      	sei 
0000eb ef0f                      	ser temp1
0000ec b90d                      	out DDRE, temp1
                                 
0000ed e000                      	ldi temp1, 0b00000000
0000ee 9300 0080                 	sts TCCR1A, temp1
0000f0 e002                      	ldi temp1, 0b00000010	;set prescaler to 8 = 128 ms
0000f1 9300 0081                 	sts TCCR1B, temp1
                                 
                                 	;speaker 
0000f3 e001                      	ldi temp1, 0b00000001
0000f4 b904                      	out DDRB, temp1
                                 
0000f5 c1e8                      	rjmp start_screen
                                 
                                 	loop:
0000f6 cfff                      		rjmp loop
                                 
                                 
                                 ;INTERRUPTS-----------------------------------------------------
                                 ;Button Interrupts-----------
                                 EXT_INT0:						;Right button
0000f7 930f                      	push temp1
0000f8 931f                      	push temp2
0000f9 b70f                      	in temp1, SREG
0000fa 930f                      	push temp1
                                 
0000fb 3041                      	cpi debounceFlag0, 1		;If flag is set end
0000fc f121                      	breq END_INT
                                 
0000fd e041                      	ldi debounceFlag0, 1		;set debounce flag
                                 
0000fe 3065                      	cpi current_screen, 5	;Check for admin screen
0000ff f009                      	breq admin_right
000100 c020                      	rjmp END_INT
                                 
                                 	admin_right:
000101 940e 02c2                 		call get_item
000103 e00a                      		ldi temp1, 10			;check to see if inventory count is already at 10
000104 16d0                      		cp tempcount, temp1
000105 f0d9                      		breq END_INT			;if so don't increment
000106 2d0d                      		mov temp1, tempcount
000107 9503                      		inc temp1
000108 2ed0                      		mov tempcount, temp1
000109 940e 02ce                 		call set_item
00010b c015                      		rjmp END_INT
                                 
                                 
                                 
                                 EXT_INT1:		
00010c 930f                      	push temp1
00010d 931f                      	push temp2
00010e b70f                      	in temp1, SREG
00010f 930f                      	push temp1
                                 
000110 3051                      	cpi debounceFlag1, 1		;If flag is set end
000111 f079                      	breq END_INT
                                 
000112 e051                      	ldi debounceFlag1, 1		;set debounce flag
                                 
000113 3065                      	cpi current_screen, 5	;Check for admin screen
000114 f009                      	breq admin_left
000115 c00b                      	rjmp END_INT
                                 
                                 	admin_left:
000116 940e 02c2                 		call get_item
000118 e000                      		ldi temp1, 0
000119 16d0                      		cp tempcount, temp1
00011a f031                      		breq END_INT
00011b 2d0d                      		mov temp1, tempcount
00011c 950a                      		dec temp1
00011d 2ed0                      		mov tempcount, temp1
00011e 940e 02ce                 		call set_item
000120 c000                      		rjmp END_INT
                                 
                                 END_INT:
000121 910f                      	pop temp1
000122 bf0f                      	out SREG, temp1
000123 911f                      	pop temp2
000124 910f                      	pop temp1
000125 3065                      	cpi current_screen, 5		;If in admin screen need to update the screen
000126 f009                      	breq update_admin_hop		
000127 9518                      	reti
                                 
                                 update_admin_hop:
000128 940e 04f4                 	call update_admin_screen
                                 
                                 ;Timer Interrupts--------------
                                 Timer0OVF:
00012a 930f                      	push temp1
00012b 931f                      	push temp2
00012c b70f                      	in temp1, SREG ;Save status register
00012d 930f                      	push temp1
00012e 939f                      	push r25
00012f 938f                      	push r24
000130 93df                      	push YH
000131 93cf                      	push YL
                                 
000132 3041                      	cpi debounceFlag0, 1 ;if either flags have been set run debounce timer
000133 f019                      	breq new_bounce_timer
000134 3051                      	cpi debounceFlag1, 1
000135 f009                      	breq new_bounce_timer
000136 c019                      	rjmp continue_timer ;else continue with the second timer
                                 
                                 	new_bounce_timer:
000137 9180 0204                 		lds r24, DebounceCounter
000139 9190 0205                 		lds r25, DebounceCounter+1
00013b 9601                      		adiw r24:r25, 1
                                 
00013c 308c                      		cpi r24, low(780) ;for 50 ms say
00013d e003                      		ldi temp1, high(780)
00013e 0790                      		cpc r25, temp1
00013f f461                      		brne NotFif
000140 2744                      		clr debounceFlag0	;if 50ms has passed clear the flags and counter
000141 2755                      		clr debounceFlag1
000142 930f
000143 e0c4
000144 e0d2
000145 2700
000146 9309
000147 8308
000148 910f                      		clear DebounceCounter
000149 2788                      		clr r24
00014a 2799                      		clr r25
00014b c004                      		rjmp continue_timer
                                 
                                 	NotFif:
00014c 9380 0204                 		sts DebounceCounter, r24
00014e 9390 0205                 		sts DebounceCounter+1, r25
                                 
                                 	continue_timer:
000150 9180 0200                 		lds r24, TempCounter
000152 9190 0201                 		lds r25, TempCounter+1
000154 9601                      		adiw r25:r24, 1
                                 
000155 3060                      		cpi current_screen, 0
000156 f039                      		breq start_timer
                                 
000157 3061                      		cpi current_screen, 1
000158 f111                      		breq select_timer
                                 
000159 3062                      		cpi current_screen, 2
00015a f009                      		breq empty_timer_hop
                                 
00015b c07c                      		rjmp ENDIF
                                 
                                 	empty_timer_hop:
00015c 940c 01ab                 	jmp empty_timer
                                 
                                 	start_timer:
00015e 3071                      		cpi new_screen_flag, 1	;if screen has just been changed to start screen then start a new timer
00015f f069                      		breq new_start_timer
                                 
000160 388c                      		cpi r24, low(23436)		;check to see if 3 seconds has passed
000161 e50b                      		ldi temp1, high(23436)
000162 0790                      		cpc r25, temp1
000163 f491                      		brne NotThreeSeconds
000164 91cf                      		pop YL
000165 91df                      		pop YH
000166 918f                      		pop r24
000167 919f                      		pop r25
000168 910f                      		pop temp1
000169 bf0f                      		out SREG, temp1
00016a 911f                      		pop temp2
00016b 910f                      		pop temp1
00016c c200                      		rjmp select_screen		;else if 3 seconds has passed jump to select screen
                                 
                                 		new_start_timer:
00016d e070                      			ldi new_screen_flag, 0	;not a new screen anymore
00016e 930f
00016f e0c0
000170 e0d2
000171 2700
000172 9309
000173 8308
000174 910f                      			clear TempCounter	;start 'new' timer
000175 c062                      			rjmp EndIF
                                 
                                 		NotThreeSeconds:
000176 9380 0200                 			sts TempCounter, r24	;Store the new value of the temporary counter
000178 9390 0201                 			sts TempCounter+1, r25
00017a c05d                      			rjmp EndIF	
                                 
                                 	select_timer:
00017b e001                      		ldi temp1, 1
00017c 16c0                      		cp star_pressed, temp1		;if star has been pressed then start a new timer
00017d f559                      		brne ENDIF_hop
                                 
00017e e001                      		ldi temp1, 1
00017f 1680                      		cp new_star_flag, temp1
000180 f0c1                      		breq new_select_timer
                                 
000181 3884                      		cpi r24, low(7812)			;check if one second has passed
000182 e10e                      		ldi temp1, high(7812)
000183 0790                      		cpc r25, temp1
000184 f4f9                      		brne NotSecond				;if not jump to not second and store tempcounter
000185 94a3                      		inc second_counter			;if so increment the number of seconds had and clear TempCounter to count the next second
000186 930f
000187 e0c0
000188 e0d2
000189 2700
00018a 9309
00018b 8308
00018c 910f                      		clear TempCounter
00018d e005                      		ldi temp1, 5
00018e 16a0                      		cp second_counter, temp1	;if this is now 5 seconds then go to admin screen else
00018f f4c9                      		brne EndIF_hop
000190 91cf                      		pop YL
000191 91df                      		pop YH
000192 918f                      		pop r24
000193 919f                      		pop r25
000194 910f                      		pop temp1
000195 bf0f                      		out SREG, temp1
000196 911f                      		pop temp2
000197 910f                      		pop temp1
000198 c358                      		rjmp admin_screen
                                 
                                 		new_select_timer:
000199 930f
00019a e0c0
00019b e0d2
00019c 2700
00019d 9309
00019e 8308
00019f 910f                      			clear TempCounter	;start 'new' timer
0001a0 24aa                      			clr second_counter
0001a1 e000                      			ldi temp1, 0
0001a2 2e80                      			mov new_star_flag, temp1
0001a3 c034                      			rjmp EndIF
                                 
                                 		NotSecond:
0001a4 9380 0200                 			sts TempCounter, r24	;Store the new value of the temporary counter
0001a6 9390 0201                 			sts TempCounter+1, r25
0001a8 c02f                      			rjmp EndIF	
                                 
                                 	ENDIF_hop:
0001a9 940c 01d8                 		jmp ENDIF
                                 	
                                 	empty_timer:
0001ab 3071                      		cpi new_screen_flag, 1	;if screen has just been changed to start screen then start a new timer
0001ac f0a9                      		breq new_empty_timer
                                 
0001ad 3c86                      		cpi r24, low(11718)		;check to see if 1.5 seconds has passed
0001ae e20d                      		ldi temp1, high(11718)
0001af 0790                      		cpc r25, temp1
0001b0 f4e9                      		brne NotHalfThreeSeconds
0001b1 2700                      		clr temp1				;turn off all LEDs after 1.5 seconds
0001b2 b908                      		out PORTC, temp1
0001b3 bb04                      		out PORTG, temp1
0001b4 388c                      		cpi r24, low(23436)	
0001b5 e59b                      		ldi r25, high(23436)
0001b6 0790                      		cpc r25, temp1			;check to see if 3 seconds has passed
0001b7 f4d9                      		brne NotThreeSecondsEmpty
0001b8 91cf                      		pop YL
0001b9 91df                      		pop YH
0001ba 918f                      		pop r24
0001bb 919f                      		pop r25
0001bc 910f                      		pop temp1
0001bd bf0f                      		out SREG, temp1
0001be 911f                      		pop temp2
0001bf 910f                      		pop temp1
0001c0 940c 036d                 		jmp select_screen
                                 
                                 		new_empty_timer:
0001c2 e070                      			ldi new_screen_flag, 0	;not a new screen anymore
0001c3 930f
0001c4 e0c0
0001c5 e0d2
0001c6 2700
0001c7 9309
0001c8 8308
0001c9 910f                      			clear TempCounter	;start 'new' timer
0001ca ef0f                      			ser temp1
0001cb b908                      			out PORTC, temp1		;turn on all port C LEDs
0001cc bb04                      			out PORTG, temp1		;turn on the 2 port G LEDs
0001cd c00a                      			rjmp EndIF
                                 
                                 		NotHalfThreeSeconds:
0001ce 9380 0200                 			sts TempCounter, r24	;Store the new value of the temporary counter
0001d0 9390 0201                 			sts TempCounter+1, r25
0001d2 c005                      			rjmp EndIF
                                 			
                                 		NotThreeSecondsEmpty:
0001d3 9380 0200                 			sts TempCounter, r24
0001d5 9390 0201                 			sts TempCounter+1, r25
0001d7 c000                      			rjmp EndIF
                                 
                                 
                                 EndIF:
0001d8 91cf                          pop YL
0001d9 91df                      	pop YH
0001da 918f                      	pop r24
0001db 919f                      	pop r25
0001dc 910f                      	pop temp1
0001dd bf0f                      	out SREG, temp1
0001de 911f                      	pop temp2
0001df 910f                      	pop temp1
0001e0 9518                      	reti
                                 
                                 keypad_prologue:
0001e1 ee3f                      	ldi cmask, INITCOLMASK
0001e2 2799                      	clr col
0001e3 940c 01ea                 	jmp colloop
                                 
                                 keysScanned:
0001e5 e000                      	ldi temp1, 0 									; set currPress = 0
0001e6 9300 0218                 	sts currPress, temp1
0001e8 2ec0                      	mov star_pressed, temp1
0001e9 cff7                      	rjmp keypad_prologue
                                 
                                 colloop:
0001ea 3094                      	cpi col, 4 										; compare current column # to total # columns
0001eb f3c9                      	breq keysScanned								; if all keys are scanned, repeat
0001ec 9330 010b                 	sts PORTL, cmask								; otherwise, scan a column
                                 
0001ee ef0f                      	ldi temp1, 0xFF									; slow down the scan operation to debounce button press
                                 	delay:
0001ef 950a                      	dec temp1
0001f0 f7f1                      	brne delay
0001f1 d0ca                      	rcall sleep_20ms
                                 
0001f2 9100 0218                 	lds temp1, currPress 							; if currPress = 0, set wasPress = 0
0001f4 3001                      	cpi temp1, 1
0001f5 f421                      	brne notPressed
0001f6 e001                      	ldi temp1, 1									; set wasPress = 1
0001f7 9300 0219                 	sts wasPress, temp1
0001f9 c004                      	rjmp scan
                                 	notPressed:
0001fa e000                      		ldi temp1, 0 								; set wasPress = 0
0001fb d0ba                      		rcall sleep_5ms
0001fc 9300 0219                 		sts wasPress, temp1
                                 
                                 	scan:
0001fe 9100 0109                 	lds temp1, PINL									; read PORTL
000200 700f                      	andi temp1, ROWMASK								; get the keypad output value
000201 3f00                      	cpi temp1, 0xF0 								; check if any row is low (0)
000202 f011                      	breq rowloop									; if yes, find which row is low
000203 e021                      	ldi rmask, INITROWMASK							; initialize rmask with 0000 0001 for row check
000204 2788                      	clr row
                                 
                                 rowloop:
000205 3084                      	cpi row, 4 										; compare current value of row with total number of rows (4)
000206 f039                      	breq nextcol									; if theyre equal, the row scan is over.
000207 2f10                      	mov temp2, temp1 								; temp1 is 0xF
000208 2312                      	and temp2, rmask 								; check un-masked bit
000209 f041                      	breq convert 									; if bit is clear, the key is pressed
00020a 9583                      	inc row 										; else move to the next row
00020b 0f22                      	lsl rmask 										; shift row mask left by one
00020c 940c 0205                 	jmp rowloop
                                 
                                 nextcol:											; if row scan is over
00020e 0f33                      	lsl cmask 										; shift column mask left by one
00020f 9593                      	inc col 										; increase column value
000210 940c 01ea                 	jmp colloop
                                 
                                 convert:
000212 e001                      	ldi temp1, 1
000213 9300 0218                 	sts currPress, temp1		;if wasPress = 1 ignore the press
000215 9100 0219                 	lds temp1, wasPress
000217 3001                      	cpi temp1, 1
000218 f241                      	breq keypad_prologue
                                 
000219 3060                      	cpi current_screen, 0	;if the current screen is the start screen a button pressed means it should go to the next screen
00021a f039                      	breq button_pressed
                                 
00021b 3093                      	cpi col, 3 ; If the pressed key is in col.3
00021c f0f1                      	breq letters ; we have a letter
                                 					; If the key is not in col.3 and
00021d 3083                      	cpi row, 3 ; If the key is in row3,
00021e f009                      	breq symbols_hop ; we have a symbol or 0
                                 
00021f c004                      	rjmp numbers		;else we have a number
                                 
                                 symbols_hop:
000220 940c 0267                 	jmp symbols
                                 
                                 button_pressed:
000222 940c 036d                 	jmp select_screen
                                 
                                 numbers: ;else its a number (NOT ZERO)
000224 2f08                      	mov temp1, row ; Otherwise we have a number in 1-9
000225 0f00                      	lsl temp1
000226 0f08                      	add temp1, row
000227 0f09                      	add temp1, col ; temp1 = row*3 + col
000228 9503                      	inc temp1
                                 	;temp1 now has the value of the button pushed
                                 	numbers_computed:
000229 3061                      		cpi current_screen, 1	;check if the current screen is the select screen
00022a f021                      		breq numbers_select
                                 
00022b 3065                      		cpi current_screen, 5	;check if current screen is admin
00022c f051                      		breq numbers_admin
                                 
00022d 940c 01e1                 	jmp keypad_prologue
                                 
                                 	numbers_select:
00022f 2eb0                      		mov current_item, temp1
000230 940e 02c2                 		call get_item
000232 e010                      		ldi temp2, 0
000233 16d1                      		cp tempcount, temp2
000234 f021                      		breq empty_hop
000235 940c 03c9                 		jmp coin_screen
                                 	
                                 	numbers_admin:
000237 2eb0                      		mov current_item, temp1
000238 c2bb                      		rjmp update_admin_screen
                                 
                                 empty_hop:
000239 940e 0397                 	call empty_screen		
                                 
                                 letters:
00023b 3065                      	cpi current_screen, 5	;check if current screen is admin
00023c f011                      	breq letters_admin
00023d 940c 01e1                 	jmp keypad_prologue
                                 
                                 	letters_admin:
00023f 3080                      		cpi row, 0
000240 f061                      		breq letters_admin_A
                                 
000241 3081                      		cpi row, 1
000242 f0b1                      		breq letters_admin_B
                                 		
000243 3083                      		cpi row, 3			;If C do nothing
000244 f101                      		breq update_admin_hop2
                                 
000245 940e 02c2                 		call get_item
000247 e000                      		ldi temp1, 0
000248 2ed0                      		mov tempcount, temp1
000249 940e 02ce                 		call set_item
00024b 940c 04f4                 		jmp update_admin_screen
                                 
                                 		letters_admin_A:
00024d 940e 02c2                 			call get_item
00024f e003                      			ldi temp1, 3
000250 16e0                      			cp tempcost, temp1
000251 f099                      			breq update_admin_hop2
000252 2d0e                      			mov temp1, tempcost
000253 9503                      			inc temp1
000254 2ee0                      			mov tempcost, temp1
000255 940e 02ce                 			call set_item
000257 940c 04f4                 			jmp update_admin_screen
                                 
                                 		letters_admin_B:
000259 940e 02c2                 			call get_item
00025b e000                      			ldi temp1, 0
00025c 16e0                      			cp tempcost, temp1
00025d f039                      			breq update_admin_hop2
00025e 2d0e                      			mov temp1, tempcost
00025f 950a                      			dec temp1
000260 2ee0                      			mov tempcost, temp1
000261 940e 02ce                 			call set_item
000263 940c 04f4                 			jmp update_admin_screen
                                 
                                 update_admin_hop2:
000265 940e 04f4                 	call update_admin_screen
                                 
                                 symbols:
000267 3091                      	cpi col, 1 ; or if we have zero
000268 f109                      	breq zero
                                 
000269 3061                      	cpi current_screen, 1 ;check for select screen
00026a f031                      	breq symbols_select
                                 
00026b 3063                      	cpi current_screen, 3 ;check for coin screen
00026c f089                      	breq symbols_coin
                                 
00026d 3065                      	cpi current_screen, 5 ;check for admin screen
00026e f099                      	breq symbols_admin
                                 
00026f 940c 01e1                 	jmp keypad_prologue
                                 
                                 	symbols_select:
000271 3090                      		cpi col, 0
000272 f011                      		breq star_pushed
000273 940c 01e1                 		jmp keypad_prologue
                                 
                                 	star_pushed:
000275 e000                      		ldi temp1, 0
000276 16c0                      		cp star_pressed, temp1			;if star pressed is 0 then must've been pushed for first time
000277 f481                      		brne keypad_prologue_hop
000278 e001                      		ldi temp1, 1
000279 2e80                      		mov new_star_flag, temp1			;star pushed for first time
00027a e001                      		ldi temp1, 1
00027b 2ec0                      		mov star_pressed, temp1			;set star pressed to 1
00027c 940c 01e1                 		jmp keypad_prologue	
                                 
                                 	symbols_coin:
00027e 3092                      		cpi col, 2	;check to see if # pressed
00027f f441                      		brne keypad_prologue_hop
000280 940c 0435                 		jmp CoinRet
                                 		;breq call_CoinRet
                                 		;jmp call_acd
                                 
                                 	symbols_admin:
000282 3092                      		cpi col, 2	;check to see if # pressed
000283 f421                      		brne keypad_prologue_hop
000284 2700                      		clr temp1
000285 b908                      		out PORTC, temp1
000286 bb04                      		out PORTG, temp1
000287 c0e5                      		rjmp select_screen	;if pressed go to select_screen
                                 
                                 keypad_prologue_hop:
000288 940c 01e1                 	jmp keypad_prologue
                                 
                                 zero:
                                 	;ldi temp1, 0 ; Set to zero
                                 	;rjmp numbers_computed
                                 	;TODO zero handling for each screen
00028a 940c 01e1                 	jmp keypad_prologue
                                 
                                 ;LCD Commands-----------------------------------------------------------------------------------
                                 lcd_command:
00028c bb01                      	out PORTF, temp1					;Port F is LCD data, temp1 sent to LCD
00028d d01f                      	rcall sleep_1ms
00028e 9a16                      	lcd_set LCD_E					;Enable bit set so it does the command
00028f d01d                      	rcall sleep_1ms
000290 9816                      	lcd_clr LCD_E					;Enable bit cleared
000291 d01b                      	rcall sleep_1ms
000292 9508                      	ret
                                 
                                 lcd_data:
000293 bb01                      	out PORTF, temp1					;temp1 contains the data being outputted
000294 9a17                      	lcd_set LCD_RS					; Set top bit (bit 7) of LCD Control (Port A) 
                                 									; this determines read/ write to the LCD
000295 d017                      	rcall sleep_1ms					;wait ... LCD is slow
000296 9a16                      	lcd_set LCD_E					;Set bit 6
000297 d015                      	rcall sleep_1ms
000298 9816                      	lcd_clr LCD_E
000299 d013                      	rcall sleep_1ms
00029a 9817                      	lcd_clr LCD_RS
00029b 9508                      	ret
                                 
                                 lcd_wait:
00029c 930f                      	push temp1
00029d 2700                      	clr temp1
00029e bb00                      	out DDRF, temp1
00029f bb01                      	out PORTF, temp1
0002a0 9a15                      	lcd_set LCD_RW
                                 
                                 lcd_wait_loop:
0002a1 d00b                      	rcall sleep_1ms
0002a2 9a16                      	lcd_set LCD_E
0002a3 d009                      	rcall sleep_1ms
0002a4 b10f                      	in temp1, PINF
0002a5 9816                      	lcd_clr LCD_E
0002a6 fd07                      	sbrc temp1, 7
0002a7 cff9                      	rjmp lcd_wait_loop
0002a8 9815                      	lcd_clr LCD_RW
0002a9 ef0f                      	ser temp1
0002aa bb00                      	out DDRF, temp1
0002ab 910f                      	pop temp1
0002ac 9508                      	ret
                                 
                                 
                                 ; Delay commands
                                 
                                 sleep_1ms:
0002ad 938f                      	push r24
0002ae 939f                      	push r25
0002af e09f                      	ldi r25, high(DELAY_1MS)
0002b0 e98c                      	ldi r24, low(DELAY_1MS)
                                 
                                 delayloop_1ms:
0002b1 9701                      	sbiw r25:r24, 1
0002b2 f7f1                      	brne delayloop_1ms
0002b3 919f                      	pop r25
0002b4 918f                      	pop r24
0002b5 9508                      	ret
                                 
                                 
                                 sleep_5ms:
0002b6 dff6                      	rcall sleep_1ms
0002b7 dff5                      	rcall sleep_1ms
0002b8 dff4                      	rcall sleep_1ms
0002b9 dff3                      	rcall sleep_1ms
0002ba dff2                      	rcall sleep_1ms
0002bb 9508                      	ret
                                 
                                 
                                 sleep_20ms:
0002bc dff9                      	rcall sleep_5ms
0002bd dff8                      	rcall sleep_5ms
0002be dff7                      	rcall sleep_5ms
0002bf dff6                      	rcall sleep_5ms
0002c0 dff5                      	rcall sleep_5ms
0002c1 9508                      	ret
                                 
                                 
                                 get_item:
0002c2 930f                      	push temp1
0002c3 e0d2                      	ldi YH, high(Item1)
0002c4 e0c6                      	ldi YL, low(Item1)
0002c5 2d0b                      	mov temp1, current_item
                                 	get_item_loop:
0002c6 3000                      		cpi temp1, 0
0002c7 f021                      		breq end_item_count
0002c8 90d9                      		ld tempcount, Y+	
0002c9 90e9                      		ld tempcost, Y+
0002ca 950a                      		dec temp1
0002cb cffa                      		rjmp get_item_loop
                                 	end_item_count:
0002cc 910f                      		pop temp1
0002cd 9508                      		ret
                                 
                                 set_item:
0002ce 930f                      	push temp1
0002cf 931f                      	push temp2
                                 
0002d0 e0d2                      	ldi YH, high(Item1)
0002d1 e0c6                      	ldi YL, low(Item1)
0002d2 2d0b                      	mov temp1, current_item
                                 	set_item_loop:
0002d3 3001                      		cpi temp1, 1
0002d4 f021                      		breq end_item_set
0002d5 9119                      		ld temp2, Y+
0002d6 9119                      		ld temp2, Y+
0002d7 950a                      		dec temp1
0002d8 cffa                      		rjmp set_item_loop
                                 	end_item_set:
0002d9 92d9                      		st Y+, tempcount
0002da 92e9                      		st Y+, tempcost
0002db 911f                      		pop temp2
0002dc 910f                      		pop temp1
0002dd 9508                      		ret
                                 
                                 
                                 
                                 
                                 
                                 	
                                 
                                 
                                 ;SCREENS--------------------------------------------------------------------------------------------
                                 
                                 ;Start Screen------------------
                                 ;should show 2121 17s1 (dunno what our group name is) then next line Vending Machine
                                 ;Then 3 seconds later, or until any keypad button is pressed should go to select screen
                                 start_screen:
0002de e060                      	ldi current_screen, 0
0002df e071                      	ldi new_screen_flag, 1
0002e0 e302
0002e1 dfb1
0002e2 dfb9                      	do_lcd_data '2'
0002e3 e301
0002e4 dfae
0002e5 dfb6                      	do_lcd_data '1'
0002e6 e302
0002e7 dfab
0002e8 dfb3                      	do_lcd_data '2'
0002e9 e301
0002ea dfa8
0002eb dfb0                      	do_lcd_data '1'
0002ec e200
0002ed dfa5
0002ee dfad                      	do_lcd_data ' '
0002ef e301
0002f0 dfa2
0002f1 dfaa                      	do_lcd_data '1'
0002f2 e307
0002f3 df9f
0002f4 dfa7                      	do_lcd_data '7'
0002f5 e703
0002f6 df9c
0002f7 dfa4                      	do_lcd_data 's'
0002f8 e301
0002f9 df99
0002fa dfa1                      	do_lcd_data '1'
0002fb e200
0002fc df96
0002fd df9e                      	do_lcd_data ' '
0002fe e200
0002ff df93
000300 df9b                      	do_lcd_data ' '
000301 e200
000302 df90
000303 df98                      	do_lcd_data ' '
000304 e200
000305 df8d
000306 df95                      	do_lcd_data ' '
000307 e40d
000308 df8a
000309 df92                      	do_lcd_data 'M'
00030a e302
00030b df87
00030c df8f                      	do_lcd_data '2'
00030d ea08
00030e df7d
00030f df8c                      	do_lcd_command LCD_SEC_LINE
000310 e506
000311 df81
000312 df89                      	do_lcd_data 'V'
000313 e605
000314 df7e
000315 df86                      	do_lcd_data 'e'
000316 e60e
000317 df7b
000318 df83                      	do_lcd_data 'n'
000319 e604
00031a df78
00031b df80                      	do_lcd_data 'd'
00031c e609
00031d df75
00031e df7d                      	do_lcd_data 'i'
00031f e60e
000320 df72
000321 df7a                      	do_lcd_data 'n'
000322 e607
000323 df6f
000324 df77                      	do_lcd_data 'g'
000325 e200
000326 df6c
000327 df74                      	do_lcd_data ' '
000328 e40d
000329 df69
00032a df71                      	do_lcd_data 'M'
00032b e601
00032c df66
00032d df6e                      	do_lcd_data 'a'
00032e e603
00032f df63
000330 df6b                      	do_lcd_data 'c'
000331 e608
000332 df60
000333 df68                      	do_lcd_data 'h'
000334 e609
000335 df5d
000336 df65                      	do_lcd_data 'i'
000337 e60e
000338 df5a
000339 df62                      	do_lcd_data 'n'
00033a e605
00033b df57
00033c df5f                      	do_lcd_data 'e'
00033d d002                      	rcall starting_inventory
00033e 940c 01e1                 	jmp keypad_prologue
                                 
                                 starting_inventory:
000340 e001                      	ldi temp1, 1
                                 	starting_inventory_loop:		;loop over each item setting inventory as number of items
000341 300a                      		cpi temp1, 10
000342 f039                      		breq starting_cost
000343 2eb0                      		mov current_item, temp1
000344 940e 02c2                 		call get_item				;tempcount tempcost now have old values of current_item (which is temp1)
000346 2ed0                      		mov tempcount, temp1
000347 df86                      		rcall set_item				;sets tempcount to temp1 of current_item
000348 9503                      		inc temp1
000349 cff7                      		rjmp starting_inventory_loop
                                 
                                 starting_cost:
00034a e001                      	ldi temp1, 1
                                 	starting_cost_odd_loop:		;loop over each odd numbered item setting cost to 1 coin. Temp1 will be current item to be looked at
00034b 300b                      		cpi temp1, 11
00034c f051                      		breq starting_cost_even
00034d 2eb0                      		mov current_item, temp1
00034e 940e 02c2                 		call get_item			;saves old values of count and cost into tempcount tempcost
000350 e011                      		ldi temp2, 1
000351 2ee1                      		mov tempcost, temp2
000352 940e 02ce                 		call set_item
000354 9503                      		inc temp1
000355 9503                      		inc temp1
000356 cff4                      		rjmp starting_cost_odd_loop
                                 starting_cost_even:
000357 e002                      	ldi temp1, 2
                                 	starting_cost_even_loop:		;loop over each even numbered item setting cost to 2 coins
000358 300a                      		cpi temp1, 10
000359 f051                      		breq starting_done
00035a 2eb0                      		mov current_item, temp1
00035b 940e 02c2                 		call get_item			;saves old values of count and cost into tempcount tempcost
00035d e012                      		ldi temp2, 2
00035e 2ee1                      		mov tempcost, temp2
00035f 940e 02ce                 		call set_item
000361 9503                      		inc temp1
000362 9503                      		inc temp1
000363 cff4                      		rjmp starting_cost_even_loop
                                 starting_done:
000364 e009                      	ldi temp1, 9
000365 2eb0                      	mov current_item, temp1
000366 940e 02c2                 	call get_item
000368 e000                      	ldi temp1, 0
000369 2ed0                      	mov tempcount, temp1
00036a 940e 02ce                 	call set_item
00036c 9508                      	ret
                                 
                                 ;halt:
                                 ;	rjmp halt
                                 
                                 ;Select Screen-----------------
                                 ;Pressing 1-9 should try to retrieve the corresponding item, if in inventory -> coin screen else -> empty screen
                                 select_screen:
00036d e061                      	ldi current_screen, 1
00036e e001
00036f df1c
000370 df2b                      	do_lcd_command LCD_DISP_CLR
000371 e800
000372 df19
000373 df28                      	do_lcd_command LCD_HOME_LINE
000374 e503
000375 df1d
000376 df25                      	do_lcd_data 'S'
000377 e605
000378 df1a
000379 df22                      	do_lcd_data 'e'
00037a e60c
00037b df17
00037c df1f                      	do_lcd_data 'l'
00037d e605
00037e df14
00037f df1c                      	do_lcd_data 'e'
000380 e603
000381 df11
000382 df19                      	do_lcd_data 'c'
000383 e704
000384 df0e
000385 df16                      	do_lcd_data 't'
000386 e200
000387 df0b
000388 df13                      	do_lcd_data ' '
000389 e609
00038a df08
00038b df10                      	do_lcd_data 'i'
00038c e704
00038d df05
00038e df0d                      	do_lcd_data 't'
00038f e605
000390 df02
000391 df0a                      	do_lcd_data 'e'
000392 e60d
000393 deff
000394 df07                      	do_lcd_data 'm'
                                 
000395 940c 01e1                 	jmp keypad_prologue
                                 	;all handling in button areas
                                 
                                 
                                 ;Empty Screen-----------------
                                 ;display Out of Stock with number of item trying to be retrieved on the second line
                                 ;Stay in state for 3 seconds before returning to select screen
                                 ;All 10 LEDS should be on for the first half of the 3 seconds then off for the second half
                                 empty_screen:
000397 e062                      	ldi current_screen, 2
000398 e071                      	ldi new_screen_flag, 1
000399 e001
00039a def1
00039b df00                      	do_lcd_command LCD_DISP_CLR
00039c e800
00039d deee
00039e defd                      	do_lcd_command LCD_HOME_LINE
00039f e40f
0003a0 def2
0003a1 defa                      	do_lcd_data 'O'
0003a2 e705
0003a3 deef
0003a4 def7                      	do_lcd_data 'u'
0003a5 e704
0003a6 deec
0003a7 def4                      	do_lcd_data 't'
0003a8 e200
0003a9 dee9
0003aa def1                      	do_lcd_data ' '
0003ab e60f
0003ac dee6
0003ad deee                      	do_lcd_data 'o'
0003ae e606
0003af dee3
0003b0 deeb                      	do_lcd_data 'f'
0003b1 e200
0003b2 dee0
0003b3 dee8                      	do_lcd_data ' '
0003b4 e703
0003b5 dedd
0003b6 dee5                      	do_lcd_data 's'
0003b7 e704
0003b8 deda
0003b9 dee2                      	do_lcd_data 't'
0003ba e60f
0003bb ded7
0003bc dedf                      	do_lcd_data 'o'
0003bd e603
0003be ded4
0003bf dedc                      	do_lcd_data 'c'
0003c0 e60b
0003c1 ded1
0003c2 ded9                      	do_lcd_data 'k'
0003c3 ea08
0003c4 dec7
0003c5 ded6                      	do_lcd_command LCD_SEC_LINE
                                 
0003c6 2d0b                      	mov temp1, current_item
0003c7 d195                      	rcall write_digits		;write out current_item
                                 	empty_loop:
0003c8 dfff                      		rcall empty_loop		;loop until timers send back to select_screen
                                 
                                 ;Coin Screen----------------
                                 coin_screen:
0003c9 e063                      	ldi current_screen, 3
0003ca 940e 02c2                 	call get_item
0003cc 2c9e                      	mov coins_needed, tempcost
                                 
                                 	coin_screen_update:
                                 
0003cd e001
0003ce debd
0003cf decc                      	do_lcd_command LCD_DISP_CLR
0003d0 e800
0003d1 deba
0003d2 dec9                      		do_lcd_command LCD_HOME_LINE
0003d3 e409
0003d4 debe
0003d5 dec6                      		do_lcd_data 'I'
0003d6 e60e
0003d7 debb
0003d8 dec3                      		do_lcd_data 'n'
0003d9 e703
0003da deb8
0003db dec0                      		do_lcd_data 's'
0003dc e605
0003dd deb5
0003de debd                      		do_lcd_data 'e'
0003df e702
0003e0 deb2
0003e1 deba                      		do_lcd_data 'r'
0003e2 e704
0003e3 deaf
0003e4 deb7                      		do_lcd_data 't'
0003e5 e200
0003e6 deac
0003e7 deb4                      		do_lcd_data ' '
0003e8 e603
0003e9 dea9
0003ea deb1                      		do_lcd_data 'c'
0003eb e60f
0003ec dea6
0003ed deae                      		do_lcd_data 'o'
0003ee e609
0003ef dea3
0003f0 deab                      		do_lcd_data 'i'
0003f1 e60e
0003f2 dea0
0003f3 dea8                      		do_lcd_data 'n'
0003f4 e703
0003f5 de9d
0003f6 dea5                      		do_lcd_data 's'
0003f7 ea08
0003f8 de93
0003f9 dea2                      		do_lcd_command LCD_SEC_LINE
                                 	
0003fa 2d09                      		mov temp1, coins_needed
0003fb d161                      		rcall write_digits    		;write  tmp cost
0003fc 940c 01e1                 		jmp keypad_prologue			;check for # to be pressed
                                 
                                 
                                     ADC_ISR:
0003fe 930f                          	push temp1
0003ff b70f                      		in temp1, SREG
000400 930f                      		push temp1
000401 924f                      		push adc_L
000402 925f                      		push adc_H
000403 927f                      		push interrupt_counter
                                 
000404 9040 0078                 		lds adc_L, ADCL		
000406 9050 0079                 		lds adc_H, ADCH
                                 		
                                 
000408 e001                      		ldi temp1, 1
000409 1670                      		cp interrupt_counter, temp1
00040a f039                      		breq check_max
                                 
00040b e000                      		ldi temp1, low(0)
00040c 1640                      		cp adc_L, temp1		; check whether interrupt reads 0
00040d e000                      		ldi temp1, high(0)
00040e 0650                      		cpc adc_H, temp1
00040f f469                      		brne adc_end
000410 9473                      		inc interrupt_counter
000411 c008                      		rjmp check_coin		
                                 
                                 		check_max:
000412 ef0f                      			ldi temp1, low(0x3FF)				; check for max value 
000413 1640                      			cp adc_L, temp1	
000414 e003                      			ldi temp1, high(0x3FF)
000415 0650                      			cpc adc_H, temp1
000416 f431                      			brne adc_end
000417 9473                      			inc interrupt_counter
000418 c004                      			rjmp adc_end
                                     
000419 b878                      	out PORTC,interrupt_counter
                                 
                                 	    check_coin:			; if interrupt_counter=3 then coin has been inserted 
00041a e003                      			ldi temp1, 3
00041b 1670                      			cp interrupt_counter, temp1
                                 			;brne adc_end
00041c f039                      			breq coin_loop
                                 	    
                                 	 adc_end:
00041d 907f                      	    pop interrupt_counter
00041e 905f                      	    pop adc_H
00041f 904f                      	    pop adc_L
000420 910f                      		pop temp1
000421 bf0f                      		out SREG, temp1
000422 910f                      		pop temp1
000423 9518                      		reti
                                 
                                      
                                 		coin_loop:										;dealing with the potentiometer
000424 930f                      		    push temp1
000425 927f                      			push interrupt_counter
000426 929f                      			push coins_needed
                                 
000427 2477                      			clr interrupt_counter
000428 949a                      		    dec coins_needed
000429 e000                      			ldi temp1, 0
00042a 1690                      		    cp coins_needed, temp1
00042b f021                      		    breq go_deliver_screen
                                 
00042c 909f                      			pop coins_needed
00042d 907f                      			pop interrupt_counter
00042e 910f                      			pop temp1
00042f cf9d                      			rjmp coin_screen_update
                                 
                                 			go_deliver_screen:
000430 909f                      			    pop coins_needed
000431 907f                      				pop interrupt_counter
000432 910f                      				pop temp1
000433 940c 0440                 				jmp deliver_screen
                                 		
                                 		CoinRet:
000435 930f                      		    push temp1
000436 929f                      		    push coins_needed
                                 
                                 			CoinRetLoop:
000437 9493                      		    inc coins_needed
000438 d040                      			rcall startMotor
000439 149e                      			cp coins_needed, tempcost
00043a f009                      			breq EndCoinRet
00043b cffb                      			rjmp CoinRetLoop
                                 			
                                 		    	EndCoinRet:
00043c 909f                      		    	    pop coins_needed 
00043d 910f                      		    	    pop temp1
00043e 940c 036d                 					jmp select_screen
                                 
                                 
                                 ;Deliver Screen
                                 deliver_screen:
000440 e064                      	ldi current_screen, 4
                                 
000441 e001
000442 de49
000443 de58                      	do_lcd_command LCD_DISP_CLR
000444 e800
000445 de46
000446 de55                      		do_lcd_command LCD_HOME_LINE
000447 e404
000448 de4a
000449 de52                      		do_lcd_data 'D'
00044a e605
00044b de47
00044c de4f                      		do_lcd_data 'e'
00044d e60c
00044e de44
00044f de4c                      		do_lcd_data 'l'
000450 e609
000451 de41
000452 de49                      		do_lcd_data 'i'
000453 e706
000454 de3e
000455 de46                      		do_lcd_data 'v'
000456 e605
000457 de3b
000458 de43                      		do_lcd_data 'e'
000459 e702
00045a de38
00045b de40                      		do_lcd_data 'r'
00045c e609
00045d de35
00045e de3d                      		do_lcd_data 'i'
00045f e60e
000460 de32
000461 de3a                      		do_lcd_data 'n'
000462 e607
000463 de2f
000464 de37                      		do_lcd_data 'g'
000465 e200
000466 de2c
000467 de34                      		do_lcd_data ' '
000468 e409
000469 de29
00046a de31                      		do_lcd_data 'I'
00046b e704
00046c de26
00046d de2e                      		do_lcd_data 't'
00046e e605
00046f de23
000470 de2b                      		do_lcd_data 'e'
000471 e60d
000472 de20
000473 de28                      		do_lcd_data 'm'
                                 		
000474 c004                      		rjmp startMotor
000475 2700                      		clr temp1
000476 9300 0200                 		sts TempCounter, temp1
000478 c01f                      		rjmp Timer1OVF
                                 
                                 ;Motor Control -------------------------------------------------
                                 
                                 
                                 startMotor:
000479 930f                      	push temp1
                                 	
                                 
00047a e001                      	ldi temp1, (1 << TOIE1) 							; enable timer
00047b 9300 006e                 	sts TIMSK0, temp1
00047d ef0f                      	ldi temp1, low(0xFF)						; start motor
00047e 9300 0099                 	sts OCR3AH, temp1
000480 e000                      	ldi temp1, high(0xFF)
000481 9300 0098                 	sts OCR3AL, temp1
                                 
000483 e071                      	ldi new_screen_flag, 1
000484 930f
000485 e0c2
000486 e0d2
000487 2700
000488 9309
000489 8308
00048a 910f                      	clear TempCounter1
                                 	
00048b 910f                      	pop temp1
00048c 9508                      	ret
                                 
                                 stopMotor:
00048d 930f                      	push temp1
                                 	
00048e e000                      	ldi temp1, (0 << TOIE1) 							; disable timer
00048f 9300 006e                 	sts TIMSK0, temp1
000491 2700                      	clr temp1										; stop motor
000492 9300 0099                 	sts OCR3AH, temp1
000494 9300 0098                 	sts OCR3AL, temp1
                                 	
000496 910f                      	pop temp1
000497 9508                      	ret
                                 
                                 Timer1OVF:						; interrupt subroutine to Timer1
000498 930f                      	push temp1
000499 b70f                      	in temp1, SREG
00049a 930f                      	push temp1 					; save conflict registers
00049b 939f                      	push r25
00049c 938f                      	push r24
                                 
00049d 9180 0202                 	lds r24, TempCounter1 		; load value of temporary counter
00049f 9190 0203                 	lds r25, TempCounter1 + 1
0004a1 9601                      	adiw r25:r24, 1 			; increase temporary counter by 1
                                 	
                                 	
0004a2 3064                      	cpi current_screen, 4
0004a3 f011                      		breq deliver_timer
                                 
0004a4 3063                      	cpi current_screen, 3
0004a5 f131                      		breq coin_timer
                                 	
                                 	
                                 	deliver_timer:
0004a6 3071                      		cpi new_screen_flag, 1	;if screen has just been changed to start screen then start a new timer
0004a7 f051                      		breq new_deliver_timer
                                 
0004a8 3c86                      		cpi r24, low(11718)		;check to see if 1.5 seconds has passed
0004a9 e20d                      		ldi temp1, high(11718)
0004aa 0790                      		cpc r25, temp1
0004ab f479                      		brne NotHalfThree
                                 		
0004ac 388c                      		cpi r24, low(23436)	
0004ad e59b                      		ldi r25, high(23436)
0004ae 0790                      		cpc r25, temp1			;check to see if 3 seconds has passed
0004af f4a1                      		brne NotThree
0004b0 dfdc                      		rcall stopMotor
0004b1 c039                      		rjmp END
                                 
                                 		new_deliver_timer:
0004b2 e070                      			ldi new_screen_flag, 0	;not a new screen anymore
0004b3 930f
0004b4 e0c2
0004b5 e0d2
0004b6 2700
0004b7 9309
0004b8 8308
0004b9 910f                      			clear TempCounter1	;start 'new' timer
0004ba c030                      			rjmp END
                                 
                                 		NotHalfThree:
0004bb ef0f                      			ser temp1
0004bc b908                      			out PORTC, temp1		;turn on all port C LEDs
0004bd e300                      			ldi temp1, 0b00110000
0004be bb04                      			out PORTG, temp1		;turn on the 2 port G LEDs
0004bf 9380 0202                 			sts TempCounter1, r24	;Store the new value of the temporary counter
0004c1 9390 0203                 			sts TempCounter1+1, r25
0004c3 c027                      			rjmp END
                                 			
                                 		NotThree:
0004c4 2700                      			clr temp1				;if 3 seconds has passed turn off leds and go back to select screen
0004c5 b908                      			out PORTC, temp1
0004c6 bb04                      			out PORTG, temp1
0004c7 9380 0202                 			sts TempCounter1, r24
0004c9 9390 0203                 			sts TempCounter1+1, r25
0004cb c01f                      			rjmp END
                                 	
                                 	  coin_timer:
0004cc 3071                      		cpi new_screen_flag, 1	;if screen has just been changed to start screen then start a new timer
0004cd f051                      		breq new_coin_timer
                                 
0004ce 3a81                      		cpi r24, low(1953)		;check to see if 0.25 seconds has passed
0004cf e007                      		ldi temp1, high(1953)
0004d0 0790                      		cpc r25, temp1
0004d1 f479                      		brne NotQuarterSecond
                                 		;0.25 seconds has passed
0004d2 dfba                      		rcall stopMotor
                                 		
0004d3 338e                      		cpi r24, low(3902)	
0004d4 e09f                      		ldi r25, high(3902)
0004d5 0790                      		cpc r25, temp1			;check to see if 0.5 seconds has passed
0004d6 f479                      		brne NotHalfSecond
0004d7 c013                      		rjmp END
                                 		
                                 
                                 		new_coin_timer:
0004d8 e070                      			ldi new_screen_flag, 0	;not a new screen anymore
0004d9 930f
0004da e0c2
0004db e0d2
0004dc 2700
0004dd 9309
0004de 8308
0004df 910f                      			clear TempCounter1	;start 'new' timer
0004e0 c00a                      			rjmp END
                                 
                                 		NotQuarterSecond:
0004e1 9380 0202                 			sts TempCounter1, r24	;Store the new value of the temporary counter
0004e3 9390 0203                 			sts TempCounter1+1, r25
0004e5 c005                      			rjmp END
                                 			
                                 		NotHalfSecond:
0004e6 9380 0202                 			sts TempCounter1, r24
0004e8 9390 0203                 			sts TempCounter1+1, r25
0004ea c000                      			rjmp END
                                 	
                                 	END:
0004eb 918f                      		pop r24
0004ec 919f                      		pop r25
0004ed 910f                      		pop temp1
0004ee bf0f                      		out SREG, temp1
0004ef 910f                      		pop temp1
0004f0 9518                      		reti 	
                                 
                                 
                                 	
                                 
                                 
                                 ;Admin Screen
                                 admin_screen:
0004f1 e065                      	ldi current_screen, 5
0004f2 e001                      	ldi temp1, 1
0004f3 2eb0                      	mov current_item, temp1		;default item selected is 1. temp1 will hold item selected
                                 	update_admin_screen:
0004f4 e001
0004f5 dd96
0004f6 dda5                      		do_lcd_command LCD_DISP_CLR
0004f7 e800
0004f8 dd93
0004f9 dda2                      		do_lcd_command LCD_HOME_LINE
0004fa e401
0004fb dd97
0004fc dd9f                      		do_lcd_data 'A'
0004fd e604
0004fe dd94
0004ff dd9c                      		do_lcd_data 'd'
000500 e60d
000501 dd91
000502 dd99                      		do_lcd_data 'm'
000503 e609
000504 dd8e
000505 dd96                      		do_lcd_data 'i'
000506 e60e
000507 dd8b
000508 dd93                      		do_lcd_data 'n'
000509 e200
00050a dd88
00050b dd90                      		do_lcd_data ' '
00050c e60d
00050d dd85
00050e dd8d                      		do_lcd_data 'm'
00050f e60f
000510 dd82
000511 dd8a                      		do_lcd_data 'o'
000512 e604
000513 dd7f
000514 dd87                      		do_lcd_data 'd'
000515 e605
000516 dd7c
000517 dd84                      		do_lcd_data 'e'
000518 e200
000519 dd79
00051a dd81                      		do_lcd_data ' '
00051b 2d0b                      		mov temp1, current_item
00051c d040                      		rcall write_digits	;prints item number stored in temp1
00051d ea08
00051e dd6d
00051f dd7c                      		do_lcd_command LCD_SEC_LINE
000520 940e 02c2                 		call get_item
000522 2d0d                      		mov temp1, tempcount
000523 940e 055d                 		call write_digits
000525 d020                      		rcall show_inventory
000526 e200
000527 dd6b
000528 dd73                      		do_lcd_data ' '
000529 e200
00052a dd68
00052b dd70                      		do_lcd_data ' '
00052c e200
00052d dd65
00052e dd6d                      		do_lcd_data ' '
00052f e200
000530 dd62
000531 dd6a                      		do_lcd_data ' '
000532 e200
000533 dd5f
000534 dd67                      		do_lcd_data ' '
000535 e200
000536 dd5c
000537 dd64                      		do_lcd_data ' '
000538 e200
000539 dd59
00053a dd61                      		do_lcd_data ' '
00053b e200
00053c dd56
00053d dd5e                      		do_lcd_data ' '			;TODO chech how long lcd line is
00053e e204
00053f dd53
000540 dd5b                      		do_lcd_data '$'
000541 2d0e                      		mov temp1, tempcost
000542 940e 055d                 		call write_digits
000544 940c 01e1                 		jmp keypad_prologue		;check for button pushing
                                 
                                 		show_inventory:		;Function to show inventory on leds
000546 2711                      			clr temp2			;temp2 will be what to be shown on leds
000547 2d0d                      			mov temp1, tempcount	
000548 3009                      			cpi temp1, 9		;check to see if need to show on PORTG LEDs as well
000549 f058                      			brlo show_inventory_C_loop
00054a 3009                      			cpi temp1, 9
00054b f029                      			breq show_9
00054c e008                      			ldi temp1, 8		;else must be 10 and have 8 remaining leds to show on PORTC
00054d ef1f                      			ser temp2	;show both PORTG LEDs
00054e bb14                      			out PORTG, temp2	
00054f 2711                      			clr temp2
000550 c004                      			rjmp show_inventory_C_loop
                                 			show_9:
000551 e008                      				ldi temp1, 8
000552 e110                      				ldi temp2, 0b00010000	;show just one PORTG LED TODO not sure if this is right one
000553 bb14                      				out PORTG, temp2
000554 2711                      				clr temp2
                                 			show_inventory_C_loop:
000555 3000                      				cpi temp1, 0
000556 f021                      				breq show_inventory_done
000557 0f11                      				lsl temp2
000558 6011                      				ori temp2, 0b00000001
000559 950a                      				dec temp1
00055a cffa                      				rjmp show_inventory_C_loop
                                 
                                 			show_inventory_done:
00055b b918                      				out PORTC, temp2
00055c 9508                      				ret
                                 				
                                 
                                 		
                                 
                                 write_digits:	
00055d 930f                      	push temp1									; writes value of temp1
00055e 300a                      	cpi temp1, 10
00055f f421                      	brne write_ones
                                 
000560 e301
000561 dd31
000562 dd39                      	do_lcd_data '1'
000563 500a                      	subi temp1, 10
                                 
                                 	write_ones:
000564 5d00                      		subi temp1, -'0'
000565 2f00
000566 dd2c
000567 dd34                      		do_lcd_data_reg temp1
000568 910f                      		pop temp1
000569 9508                      		ret
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :  46 z  :   0 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   5 
r5 :   5 r6 :   0 r7 :  12 r8 :   3 r9 :  12 r10:   3 r11:  12 r12:   4 
r13:  14 r14:  13 r15:   0 r16: 500 r17:  30 r18:   3 r19:   3 r20:   5 
r21:   5 r22:  21 r23:  11 r24:  45 r25:  48 r26:   0 r27:   0 r28:  27 
r29:  27 r30:   0 r31:   0 
Registers used: 23 out of 35 (65.7%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :   3 and   :   1 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  52 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :  20 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  25 cbi   :   5 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  43 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  15 cpc   :  11 
cpi   :  55 cpse  :   0 dec   :   7 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :  14 jmp   :  37 ld    :   4 ldd   :   0 ldi   : 251 
lds   :  11 lpm   :   0 lsl   :   4 lsr   :   0 mov   :  37 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   3 out   :  40 pop   :  77 push  :  56 rcall : 280 ret   :  13 
reti  :   5 rjmp  :  45 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   6 sen   :   0 ser   :   8 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  42 std   :   0 sts   :  41 sub   :   0 subi  :   2 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 38 out of 116 (32.8%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ad4   2692      0   2692  262144   1.0%
[.dseg] 0x000200 0x00021a      0     26     26    8192   0.3%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
