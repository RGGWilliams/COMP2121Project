
AVRASM ver. 2.2.6  C:\Users\Rhys\OneDrive\UNSW\Y3Sem1\COMP2121\COMP2121Project\Project\Project\main.asm Thu Jun 01 02:25:16 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Rhys\OneDrive\UNSW\Y3Sem1\COMP2121\COMP2121Project\Project\Project\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Rhys\OneDrive\UNSW\Y3Sem1\COMP2121\COMP2121Project\Project\Project\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Project.asm
                                 ;
                                 ; Created: 24/05/2017 10:55:30 AM
                                 ; Author : Rhys
                                 ;
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;General - notify other member if change any of these
                                 .def temp1 = r16
                                 .def temp2 = r17
                                 .def star_pressed = r12
                                 .def second_counter = r10
                                 .def current_item = r11
                                 .def new_screen_flag = r23
                                 .def current_screen	=r22	;to keep track of what screen we are currently on where 0: start screen, 1: Select Screen, 2: Empty Screen, 3: Coin Screen, 4: Deliver Screen, 5: Admin Screen
                                 .def row = r24
                                 .def col = r25
                                 .def rmask = r18
                                 .def cmask = r19
                                 .def debounceFlag0 = r20
                                 .def debounceFlag1 = r21
                                 .def tempcount = r13
                                 .def tempcost = r14
                                 .def address = r15
                                 .def coins_needed = r9
                                 .def new_star_flag = r8
                                 
                                 
                                 ;Constants----------------------------
                                 
                                 ;Delay Constants
                                 .equ F_CPU = 16000000                               ; 16MHz
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4 				; 4 cycles per iteration - setup/call-return overhead
                                 
                                 ;Keypad Constants
                                 .equ PORTLDIR = 0xF0								;PD7-4: output, PD3-0, input
                                 .equ INITCOLMASK = 0xEF								; scan from the rightmost column,
                                 .equ INITROWMASK = 0x01								; scan from the top row
                                 .equ ROWMASK = 0x0F									; for obtaining input from Port D
                                 
                                 ; LCD Instructions
                                 ;As plugged into our board
                                 .equ LCD_RS = 7										; Register Select				
                                 .equ LCD_E = 6										;Enable pin - Operation start signal for data read/write
                                 .equ LCD_RW = 5										;Signal to select Read or Write  ["0": Write; "1": Read]
                                 .equ LCD_BE = 4
                                 
                                 .set LCD_DISP_ON = 0b00001110
                                 .set LCD_DISP_OFF = 0b00001000
                                 .set LCD_DISP_CLR = 0b00000001
                                 .set LCD_FUNC_SET = 0b00111000 						; 2 lines, 5 by 7 characters
                                 .set LCD_ENTR_SET = 0b00000110 						; increment, no display shift
                                 .set LCD_HOME_LINE = 0b10000000 					; goes to 1st line (address 0)
                                 .set LCD_SEC_LINE = 0b10101000 						; goes to 2nd line (address 40)
                                 
                                 ;Macros-------------------------------------------------------------------
                                 
                                 .macro clear
                                 	ldi YL, low(@0)     ; load the memory address to Y
                                     ldi YH, high(@0)
                                     clr temp1 
                                     st Y+, temp1        ; clear the two bytes at @0 in SRAM
                                     st Y, temp1
                                 .endmacro
                                 
                                 ; LCD Macros-----------------
                                 
                                 .macro do_lcd_command
                                 	ldi temp1, @0										;saves to temp1
                                 	rcall lcd_command								;goes to LCD Command macro 
                                 	rcall lcd_wait									; wait... LCD is slow
                                 .endmacro
                                 
                                 .macro do_lcd_command_reg
                                 	mov temp1, @0										; saves t0 temp1
                                 	rcall lcd_command								; goes to LCD data macro
                                 	rcall lcd_wait									; wait ... LCD is slow
                                 .endmacro
                                 
                                 .macro do_lcd_data
                                 	ldi temp1, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_data_reg
                                 	mov temp1, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro lcd_set
                                 	sbi PORTA, @0									;set bit in I/O register
                                 .endmacro
                                 
                                 .macro lcd_clr
                                 	cbi PORTA, @0									; clear bit in I?O register
                                 .endmacro
                                 
                                 ;DSEG and CSEG ---------------------------------------------------------
                                 .dseg
000200                           	TempCounter: .byte 2
000202                           	TempCounter1: .byte 2
000204                           	DebounceCounter: .byte 2	;Used to determine if 50ms has passed for push button pressing
000206                           	Item1: .byte 2				;Item stores where first byte is the inventory count and the second byte is the coin cost 
000208                           	Item2: .byte 2				;Coin cost accessed by eg Item1+1
00020a                           	Item3: .byte 2
00020c                           	Item4: .byte 2
00020e                           	Item5: .byte 2
000210                           	Item6: .byte 2
000212                           	Item7: .byte 2
000214                           	Item8: .byte 2
000216                           	Item9: .byte 2
000218                           	currPress: .byte 1
000219                           	wasPress: .byte 1
                                 
                                 .cseg
                                 .org 0x0000
000000 940c 0035                 	jmp RESET
                                 .org INT0addr
000002 940c 00cb                 	jmp EXT_INT0		;Handling for IRQ0 (button pushed)
                                 .org INT1addr
000004 940c 00e3                 	jmp EXT_INT1	;Handling for IRQ1 (button pushed)
                                 .org INT2addr
000006 940c 03ab                 	jmp EXT_INT2    ;Handling for Potentiometer
000008 940c 0034                 	jmp DEFAULT		;Handling for IRQ2
                                 .org OVF0addr
00002e 940c 0106                 	jmp Timer0OVF	;Handling for Timer 0 overflow
000030 940c 0417                 	jmp Timer1OVF	;Handling for Timer 1 overflow
000032 940c 0034                 jmp DEFAULT			;Handling for all other interrupts
                                 
                                 ;DEFAULT AND RESET --------------------------------------------
000034 9518                      DEFAULT: reti
                                 
                                 RESET:
                                 	;Stack Pointer initialisation
000035 ef0f                      	ldi temp1, low(RAMEND)
000036 bf0d                      	out SPL, temp1
000037 e201                      	ldi temp1, high(RAMEND)
000038 bf0e                      	out SPH, temp1
                                 
                                 	;Keypad
000039 ef00                      	ldi temp1, PORTLDIR ; PL7:4/PL3:0, out/in
00003a 9300 010a                 	sts DDRL, temp1	
                                 
00003c 2700                      	clr temp1
00003d 9300 0218                 	sts currPress, temp1
00003f 9300 0219                 	sts wasPress, temp1
                                 
                                 	;LEDs
000041 ef0f                      	ser temp1	;set PORTC (LEDs) as output
000042 b907                      	out DDRC, temp1
000043 e300                      	ldi temp1, 0b00110000	;set PG2 and PG3 as output (the other LEDs)
000044 bb03                      	out DDRG, temp1
                                 
                                 	;Button interrupt
000045 9478                      	sei
                                 
000046 e002                      	ldi temp1, (2<<ISC00)	;set INT0 as falling-edge interrupt
000047 9300 0069                 	sts EICRA, temp1
000049 b30d                      	in temp1, EIMSK	;enable INT0
00004a 6001                      	ori temp1, (1<<INT0)
00004b bb0d                      	out EIMSK, temp1
                                 
00004c 9478                      	sei
                                 
00004d e008                      	ldi temp1, (2<<ISC10)	;set INT1 as falling-edge interrupt
00004e 9300 0069                 	sts EICRA, temp1
000050 b30d                      	in temp1, EIMSK			;enable INT1
000051 6002                      	ori temp1, (1<<INT1)
000052 bb0d                      	out EIMSK, temp1
                                 
000053 9478                      	sei
                                 
000054 e0c4
000055 e0d2
000056 2700
000057 9309
000058 8308                      	clear DebounceCounter
000059 2744                      	clr debounceFlag0
00005a 2755                      	clr debounceFlag1
                                 
                                 
                                 	;Timer Interrupt
00005b e0c0
00005c e0d2
00005d 2700
00005e 9309
00005f 8308                      	clear TempCounter
000060 e0c2
000061 e0d2
000062 2700
000063 9309
000064 8308                      	clear TempCounter1
                                 	
000065 e000                      	ldi temp1, 0b00000000
000066 bd04                      	out TCCR0A, temp1
000067 e002                      	ldi temp1, 0b00000010	;set prescaler to 8 = 128 ms
000068 bd05                      	out TCCR0B, temp1
000069 e001                      	ldi temp1, (1<<TOIE0)
00006a 9300 006e                 	sts TIMSK0, temp1
                                 	
00006c 9478                      	sei 
                                 
                                 	;LCD
00006d ef0f                      	ser temp1
00006e bb00                      	out DDRF, temp1			;set PORTF(LCD Data) and PORTA(LCD Control) to output
00006f b901                      	out DDRA, temp1
000070 2700                      	clr temp1				;clear PORTF and PORTA registers
000071 bb01                      	out PORTF, temp1
000072 b902                      	out PORTA, temp1
                                 
000073 e308
000074 d1cc
000075 d1db                      	do_lcd_command LCD_FUNC_SET 					; initialise LCD
000076 d1f4                      	rcall sleep_5ms
000077 e308
000078 d1c8
000079 d1d7                      	do_lcd_command LCD_FUNC_SET
00007a d1e7                      	rcall sleep_1ms
                                 
00007b e308
00007c d1c4
00007d d1d3                      	do_lcd_command LCD_FUNC_SET
00007e e308
00007f d1c1
000080 d1d0                      	do_lcd_command LCD_FUNC_SET
000081 e008
000082 d1be
000083 d1cd                      	do_lcd_command LCD_DISP_OFF
000084 e001
000085 d1bb
000086 d1ca                      	do_lcd_command LCD_DISP_CLR
000087 e006
000088 d1b8
000089 d1c7                      	do_lcd_command LCD_ENTR_SET
00008a e00e
00008b d1b5
00008c d1c4                      	do_lcd_command LCD_DISP_ON  
                                 
                                 	;Item counts
00008d e0c6
00008e e0d2
00008f 2700
000090 9309
000091 8308                      	clear Item1
000092 e0c8
000093 e0d2
000094 2700
000095 9309
000096 8308                      	clear Item2
000097 e0ca
000098 e0d2
000099 2700
00009a 9309
00009b 8308                      	clear Item3
00009c e0cc
00009d e0d2
00009e 2700
00009f 9309
0000a0 8308                      	clear Item4
0000a1 e0ce
0000a2 e0d2
0000a3 2700
0000a4 9309
0000a5 8308                      	clear Item5
0000a6 e1c0
0000a7 e0d2
0000a8 2700
0000a9 9309
0000aa 8308                      	clear Item6
0000ab e1c2
0000ac e0d2
0000ad 2700
0000ae 9309
0000af 8308                      	clear Item7
0000b0 e1c4
0000b1 e0d2
0000b2 2700
0000b3 9309
0000b4 8308                      	clear Item8
0000b5 e1c6
0000b6 e0d2
0000b7 2700
0000b8 9309
0000b9 8308                      	clear Item9
                                 
                                 	;Keypad
                                 	
                                 	;Potentiometer - connected to INT2
0000ba e200                      	ldi temp1, (2 << ISC20) 					; set INT2 to trigger on rising edge between two INTn
0000bb 9300 0069                 	sts EICRA, temp1
0000bd e004                      	ldi temp1, (1 << INT2) 							; enable INT2
0000be bb0d                      	out EIMSK, temp1
                                 
0000bf 2499                      	clr coins_needed
                                 
0000c0 ef0f                      	ser temp1
0000c1 b90d                      	out DDRE, temp1
                                 
0000c2 e000                      	ldi temp1, 0b00000000
0000c3 9300 0080                 	sts TCCR1A, temp1
0000c5 e002                      	ldi temp1, 0b00000010	;set prescaler to 8 = 128 ms
0000c6 9300 0081                 	sts TCCR1B, temp1
                                 
                                 
0000c8 940c 0293                 	jmp start_screen
                                 
                                 halt:
0000ca cfff                      	rjmp halt
                                 
                                 ;INTERRUPTS-----------------------------------------------------
                                 ;Button Interrupts-----------
                                 EXT_INT0:						;Right button
0000cb 930f                      	push temp1
0000cc 931f                      	push temp2
0000cd b70f                      	in temp1, SREG
0000ce 930f                      	push temp1
                                 
0000cf e508
0000d0 d177
0000d1 d17f                      	do_lcd_data 'X'
                                 
0000d2 3041                      	cpi debounceFlag0, 1		;If flag is set end
0000d3 f149                      	breq END_INT
                                 
0000d4 e041                      	ldi debounceFlag0, 1		;set debounce flag
                                 
0000d5 3065                      	cpi current_screen, 5	;Check for admin screen
0000d6 f009                      	breq admin_right
0000d7 c025                      	rjmp END_INT
                                 
                                 	admin_right:
0000d8 940e 0277                 		call get_item
0000da e00a                      		ldi temp1, 10			;check to see if inventory count is already at 10
0000db 16d0                      		cp tempcount, temp1
0000dc f101                      		breq END_INT			;if so don't increment
0000dd 2d0d                      		mov temp1, tempcount
0000de 9503                      		inc temp1
0000df 2ed0                      		mov tempcount, temp1
0000e0 940e 0283                 		call set_item
0000e2 c01a                      		rjmp END_INT
                                 
                                 
                                 
                                 EXT_INT1:		
0000e3 930f                      	push temp1
0000e4 931f                      	push temp2
0000e5 b70f                      	in temp1, SREG
0000e6 930f                      	push temp1
                                 
0000e7 e40f
0000e8 d15f
0000e9 d167                      	do_lcd_data 'O'
                                 
0000ea ef0f                      	ser temp1
0000eb b908                      	out PORTC, temp1
                                 
0000ec 3051                      	cpi debounceFlag1, 1		;If flag is set end
0000ed f079                      	breq END_INT
                                 
0000ee e051                      	ldi debounceFlag1, 1		;set debounce flag
                                 
0000ef 3065                      	cpi current_screen, 5	;Check for admin screen
0000f0 f009                      	breq admin_left
0000f1 c00b                      	rjmp END_INT
                                 
                                 	admin_left:
0000f2 940e 0277                 		call get_item
0000f4 e000                      		ldi temp1, 0
0000f5 16d0                      		cp tempcount, temp1
0000f6 f031                      		breq END_INT
0000f7 2d0d                      		mov temp1, tempcount
0000f8 950a                      		dec temp1
0000f9 2ed0                      		mov tempcount, temp1
0000fa 940e 0283                 		call set_item
0000fc c000                      		rjmp END_INT
                                 
                                 END_INT:
0000fd 910f                      	pop temp1
0000fe bf0f                      	out SREG, temp1
0000ff 911f                      	pop temp2
000100 910f                      	pop temp1
000101 3065                      	cpi current_screen, 5		;If in admin screen need to update the screen
000102 f009                      	breq update_admin_hop		
000103 9518                      	reti
                                 
                                 update_admin_hop:
000104 940e 046f                 	call update_admin_screen
                                 
                                 ;Timer Interrupts--------------
                                 Timer0OVF:
000106 930f                      	push temp1
000107 931f                      	push temp2
000108 b70f                      	in temp1, SREG ;Save status register
000109 930f                      	push temp1
00010a 939f                      	push r25
00010b 938f                      	push r24
                                 
00010c 3041                      	cpi debounceFlag0, 1 ;if either flags have been set run debounce timer
00010d f019                      	breq new_bounce_timer
00010e 3051                      	cpi debounceFlag1, 1
00010f f009                      	breq new_bounce_timer
000110 c017                      	rjmp continue_timer ;else continue with the second timer
                                 
                                 	new_bounce_timer:
000111 9180 0204                 		lds r24, DebounceCounter
000113 9190 0205                 		lds r25, DebounceCounter+1
000115 9601                      		adiw r24:r25, 1
                                 
000116 308c                      		cpi r24, low(780) ;for 50 ms say
000117 e003                      		ldi temp1, high(780)
000118 0790                      		cpc r25, temp1
000119 f451                      		brne NotFif
00011a 2744                      		clr debounceFlag0	;if 50ms has passed clear the flags and counter
00011b 2755                      		clr debounceFlag1
00011c e0c4
00011d e0d2
00011e 2700
00011f 9309
000120 8308                      		clear DebounceCounter
000121 2788                      		clr r24
000122 2799                      		clr r25
000123 c004                      		rjmp continue_timer
                                 
                                 	NotFif:
000124 9380 0204                 		sts DebounceCounter, r24
000126 9390 0205                 		sts DebounceCounter+1, r25
                                 
                                 	continue_timer:
000128 9180 0200                 		lds r24, TempCounter
00012a 9190 0201                 		lds r25, TempCounter+1
00012c 9601                      		adiw r25:r24, 1
                                 
00012d 3060                      		cpi current_screen, 0
00012e f029                      		breq start_timer
                                 
00012f 3061                      		cpi current_screen, 1
000130 f0b1                      		breq select_timer
                                 
000131 3062                      		cpi current_screen, 2
000132 f1c1                      		breq empty_timer
                                 
000133 c05b                      		rjmp ENDIF
                                 
                                 		;cpi r24, low(7812) 
                                 		;ldi temp, high(7812)
                                 		;cpc r25, temp
                                 		;brne NotSecond
                                 		;TODO What to do after second has passed
                                 		;clear TempCounter
                                 
                                 		;lds r24, SecondCounter
                                 		;lds r25, SecoundCounter+1
                                 		;adiw r25:r24, 1		;Increase second counter by 1
                                 		;sts SecondCounter, r24
                                 		;sts SecondCounter+1, r25
                                 		;rjmp EndIF
                                 
                                 ;NotSecond:
                                 	;sts TempCounter, r24	;Store the new value of the temporary counter
                                 	;sts TempCounter+1, r25
                                 	;rjmp EndIF
                                 
                                 	start_timer:
000134 3071                      		cpi new_screen_flag, 1	;if screen has just been changed to start screen then start a new timer
000135 f029                      		breq new_start_timer
                                 
000136 388c                      		cpi r24, low(23436)		;check to see if 3 seconds has passed
000137 e50b                      		ldi temp1, high(23436)
000138 0790                      		cpc r25, temp1
000139 f441                      		brne NotThreeSeconds
00013a c1df                      		rjmp select_screen		;else if 3 seconds has passed jump to select screen
                                 
                                 		new_start_timer:
00013b e070                      			ldi new_screen_flag, 0	;not a new screen anymore
00013c e0c0
00013d e0d2
00013e 2700
00013f 9309
000140 8308                      			clear TempCounter	;start 'new' timer
000141 c04d                      			rjmp EndIF
                                 
                                 		NotThreeSeconds:
000142 9380 0200                 			sts TempCounter, r24	;Store the new value of the temporary counter
000144 9390 0201                 			sts TempCounter+1, r25
000146 c048                      			rjmp EndIF	
                                 
                                 	select_timer:
000147 e001                      		ldi temp1, 1
000148 16c0                      		cp star_pressed, temp1		;if star has been pressed then start a new timer
000149 f4f9                      		brne ENDIF_hop
                                 
00014a e001                      		ldi temp1, 1
00014b 1680                      		cp new_star_flag, temp1
00014c f071                      		breq new_select_timer
                                 
00014d 3884                      		cpi r24, low(7812)			;check if one second has passed
00014e e10e                      		ldi temp1, high(7812)
00014f 0790                      		cpc r25, temp1
000150 f499                      		brne NotSecond				;if not jump to not second and store tempcounter
000151 94a3                      		inc second_counter			;if so increment the number of seconds had and clear TempCounter to count the next second
000152 e0c0
000153 e0d2
000154 2700
000155 9309
000156 8308                      		clear TempCounter
000157 e005                      		ldi temp1, 5
000158 16a0                      		cp second_counter, temp1	;if this is now 5 seconds then go to admin screen else
000159 f5a9                      		brne EndIF
00015a c311                      		rjmp admin_screen
                                 
                                 		new_select_timer:
00015b e0c0
00015c e0d2
00015d 2700
00015e 9309
00015f 8308                      			clear TempCounter	;start 'new' timer
000160 24aa                      			clr second_counter
000161 e000                      			ldi temp1, 0
000162 2e80                      			mov new_star_flag, temp1
000163 c02b                      			rjmp EndIF
                                 
                                 		NotSecond:
000164 9380 0200                 			sts TempCounter, r24	;Store the new value of the temporary counter
000166 9390 0201                 			sts TempCounter+1, r25
000168 c026                      			rjmp EndIF	
                                 
                                 	ENDIF_hop:
000169 940c 018f                 		jmp ENDIF
                                 	
                                 	empty_timer:
00016b 3071                      		cpi new_screen_flag, 1	;if screen has just been changed to start screen then start a new timer
00016c f051                      		breq new_empty_timer
                                 
00016d 3c86                      		cpi r24, low(11718)		;check to see if 1.5 seconds has passed
00016e e20d                      		ldi temp1, high(11718)
00016f 0790                      		cpc r25, temp1
000170 f469                      		brne NotHalfThreeSeconds
000171 388c                      		cpi r24, low(23436)	
000172 e59b                      		ldi r25, high(23436)
000173 0790                      		cpc r25, temp1			;check to see if 3 seconds has passed
000174 f491                      		brne NotThreeSecondsEmpty
000175 940c 031a                 		jmp select_screen
                                 
                                 		new_empty_timer:
000177 e070                      			ldi new_screen_flag, 0	;not a new screen anymore
000178 e0c0
000179 e0d2
00017a 2700
00017b 9309
00017c 8308                      			clear TempCounter	;start 'new' timer
00017d c011                      			rjmp EndIF
                                 
                                 		NotHalfThreeSeconds:
00017e ef0f                      			ser temp1
00017f b908                      			out PORTC, temp1		;turn on all port C LEDs
000180 e300                      			ldi temp1, 0b00110000
000181 bb04                      			out PORTG, temp1		;turn on the 2 port G LEDs
000182 9380 0200                 			sts TempCounter, r24	;Store the new value of the temporary counter
000184 9390 0201                 			sts TempCounter+1, r25
000186 c008                      			rjmp EndIF
                                 			
                                 		NotThreeSecondsEmpty:
000187 2700                      			clr temp1				;if 3 seconds has passed turn off leds and go back to select screen
000188 b908                      			out PORTC, temp1
000189 bb04                      			out PORTG, temp1
00018a 9380 0200                 			sts TempCounter, r24
00018c 9390 0201                 			sts TempCounter+1, r25
00018e c000                      			rjmp EndIF
                                 
                                 
                                 EndIF:
00018f 918f                      	pop r24
000190 919f                      	pop r25
000191 910f                      	pop temp1
000192 bf0f                      	out SREG, temp1
000193 911f                      	pop temp2
000194 910f                      	pop temp1
000195 9518                      	reti
                                 
                                 keypad_prologue:
000196 ee3f                      	ldi cmask, INITCOLMASK
000197 2799                      	clr col
000198 940c 019f                 	jmp colloop
                                 
                                 keysScanned:
00019a e000                      	ldi temp1, 0 									; set currPress = 0
00019b 9300 0218                 	sts currPress, temp1
00019d 2ec0                      	mov star_pressed, temp1
00019e cff7                      	rjmp keypad_prologue
                                 
                                 colloop:
00019f 3094                      	cpi col, 4 										; compare current column # to total # columns
0001a0 f3c9                      	breq keysScanned								; if all keys are scanned, repeat
0001a1 9330 010b                 	sts PORTL, cmask								; otherwise, scan a column
                                 
0001a3 ef0f                      	ldi temp1, 0xFF									; slow down the scan operation to debounce button press
                                 	delay:
0001a4 950a                      	dec temp1
0001a5 f7f1                      	brne delay
0001a6 d0ca                      	rcall sleep_20ms
                                 
0001a7 9100 0218                 	lds temp1, currPress 							; if currPress = 0, set wasPress = 0
0001a9 3001                      	cpi temp1, 1
0001aa f421                      	brne notPressed
0001ab e001                      	ldi temp1, 1									; set wasPress = 1
0001ac 9300 0219                 	sts wasPress, temp1
0001ae c004                      	rjmp scan
                                 	notPressed:
0001af e000                      		ldi temp1, 0 								; set wasPress = 0
0001b0 d0ba                      		rcall sleep_5ms
0001b1 9300 0219                 		sts wasPress, temp1
                                 
                                 	scan:
0001b3 9100 0109                 	lds temp1, PINL									; read PORTL
0001b5 700f                      	andi temp1, ROWMASK								; get the keypad output value
0001b6 3f00                      	cpi temp1, 0xF0 								; check if any row is low (0)
0001b7 f011                      	breq rowloop									; if yes, find which row is low
0001b8 e021                      	ldi rmask, INITROWMASK							; initialize rmask with 0000 0001 for row check
0001b9 2788                      	clr row
                                 
                                 rowloop:
0001ba 3084                      	cpi row, 4 										; compare current value of row with total number of rows (4)
0001bb f039                      	breq nextcol									; if theyre equal, the row scan is over.
0001bc 2f10                      	mov temp2, temp1 								; temp1 is 0xF
0001bd 2312                      	and temp2, rmask 								; check un-masked bit
0001be f041                      	breq convert 									; if bit is clear, the key is pressed
0001bf 9583                      	inc row 										; else move to the next row
0001c0 0f22                      	lsl rmask 										; shift row mask left by one
0001c1 940c 01ba                 	jmp rowloop
                                 
                                 nextcol:											; if row scan is over
0001c3 0f33                      	lsl cmask 										; shift column mask left by one
0001c4 9593                      	inc col 										; increase column value
0001c5 940c 019f                 	jmp colloop
                                 
                                 convert:
0001c7 e001                      	ldi temp1, 1
0001c8 9300 0218                 	sts currPress, temp1		;if wasPress = 1 ignore the press
0001ca 9100 0219                 	lds temp1, wasPress
0001cc 3001                      	cpi temp1, 1
0001cd f241                      	breq keypad_prologue
                                 
0001ce 3060                      	cpi current_screen, 0	;if the current screen is the start screen a button pressed means it should go to the next screen
0001cf f039                      	breq button_pressed
                                 
0001d0 3093                      	cpi col, 3 ; If the pressed key is in col.3
0001d1 f0f1                      	breq letters ; we have a letter
                                 					; If the key is not in col.3 and
0001d2 3083                      	cpi row, 3 ; If the key is in row3,
0001d3 f009                      	breq symbols_hop ; we have a symbol or 0
                                 
0001d4 c004                      	rjmp numbers		;else we have a number
                                 
                                 symbols_hop:
0001d5 940c 021c                 	jmp symbols
                                 
                                 button_pressed:
0001d7 940c 031a                 	jmp select_screen
                                 
                                 numbers: ;else its a number (NOT ZERO)
0001d9 2f08                      	mov temp1, row ; Otherwise we have a number in 1-9
0001da 0f00                      	lsl temp1
0001db 0f08                      	add temp1, row
0001dc 0f09                      	add temp1, col ; temp1 = row*3 + col
0001dd 9503                      	inc temp1
                                 	;temp1 now has the value of the button pushed
                                 	numbers_computed:
0001de 3061                      		cpi current_screen, 1	;check if the current screen is the select screen
0001df f021                      		breq numbers_select
                                 
0001e0 3065                      		cpi current_screen, 5	;check if current screen is admin
0001e1 f051                      		breq numbers_admin
                                 
0001e2 940c 0196                 	jmp keypad_prologue
                                 
                                 	numbers_select:
0001e4 2eb0                      		mov current_item, temp1
0001e5 940e 0277                 		call get_item
0001e7 e010                      		ldi temp2, 0
0001e8 16d1                      		cp tempcount, temp2
0001e9 f021                      		breq empty_hop
0001ea 940c 0376                 		jmp coin_screen
                                 	
                                 	numbers_admin:
0001ec 2eb0                      		mov current_item, temp1
0001ed c281                      		rjmp update_admin_screen
                                 
                                 empty_hop:
0001ee 940e 0344                 	call empty_screen		
                                 
                                 letters:
0001f0 3065                      	cpi current_screen, 5	;check if current screen is admin
0001f1 f011                      	breq letters_admin
0001f2 940c 0196                 	jmp keypad_prologue
                                 
                                 	letters_admin:
0001f4 3080                      		cpi row, 0
0001f5 f061                      		breq letters_admin_A
                                 
0001f6 3081                      		cpi row, 1
0001f7 f0b1                      		breq letters_admin_B
                                 		
0001f8 3083                      		cpi row, 3			;If C do nothing
0001f9 f101                      		breq update_admin_hop2
                                 
0001fa 940e 0277                 		call get_item
0001fc e000                      		ldi temp1, 0
0001fd 2ed0                      		mov tempcount, temp1
0001fe 940e 0283                 		call set_item
000200 940c 046f                 		jmp update_admin_screen
                                 
                                 		letters_admin_A:
000202 940e 0277                 			call get_item
000204 e003                      			ldi temp1, 3
000205 16e0                      			cp tempcost, temp1
000206 f099                      			breq update_admin_hop2
000207 2d0e                      			mov temp1, tempcost
000208 9503                      			inc temp1
000209 2ee0                      			mov tempcost, temp1
00020a 940e 0283                 			call set_item
00020c 940c 046f                 			jmp update_admin_screen
                                 
                                 		letters_admin_B:
00020e 940e 0277                 			call get_item
000210 e000                      			ldi temp1, 0
000211 16e0                      			cp tempcost, temp1
000212 f039                      			breq update_admin_hop2
000213 2d0e                      			mov temp1, tempcost
000214 950a                      			dec temp1
000215 2ee0                      			mov tempcost, temp1
000216 940e 0283                 			call set_item
000218 940c 046f                 			jmp update_admin_screen
                                 
                                 update_admin_hop2:
00021a 940e 046f                 	call update_admin_screen
                                 
                                 symbols:
00021c 3091                      	cpi col, 1 ; or if we have zero
00021d f109                      	breq zero
                                 
00021e 3061                      	cpi current_screen, 1 ;check for select screen
00021f f031                      	breq symbols_select
                                 
000220 3062                      	cpi current_screen, 2 ;check for coin screen
000221 f089                      	breq symbols_coin
                                 
000222 3065                      	cpi current_screen, 5 ;check for admin screen
000223 f099                      	breq symbols_admin
                                 
000224 940c 0196                 	jmp keypad_prologue
                                 
                                 	symbols_select:
000226 3090                      		cpi col, 0
000227 f011                      		breq star_pushed
000228 940c 0196                 		jmp keypad_prologue
                                 
                                 	star_pushed:
00022a e000                      		ldi temp1, 0
00022b 16c0                      		cp star_pressed, temp1			;if star pressed is 0 then must've been pushed for first time
00022c f481                      		brne keypad_prologue_hop
00022d e001                      		ldi temp1, 1
00022e 2e80                      		mov new_star_flag, temp1			;star pushed for first time
00022f e001                      		ldi temp1, 1
000230 2ec0                      		mov star_pressed, temp1			;set star pressed to 1
000231 940c 0196                 		jmp keypad_prologue	
                                 
                                 	symbols_coin:
000233 3092                      		cpi col, 2	;check to see if # pressed
000234 f441                      		brne keypad_prologue_hop
000235 940c 03b5                 		jmp CoinRet
                                 
                                 	symbols_admin:
000237 3092                      		cpi col, 2	;check to see if # pressed
000238 f421                      		brne keypad_prologue_hop
000239 2700                      		clr temp1
00023a b908                      		out PORTC, temp1
00023b bb04                      		out PORTG, temp1
00023c c0dd                      		rjmp select_screen	;if pressed go to select_screen
                                 
                                 keypad_prologue_hop:
00023d 940c 0196                 	jmp keypad_prologue
                                 
                                 zero:
                                 	;ldi temp1, 0 ; Set to zero
                                 	;rjmp numbers_computed
                                 	;TODO zero handling for each screen
00023f 940c 0196                 	jmp keypad_prologue
                                 
                                 ;LCD Commands-----------------------------------------------------------------------------------
                                 lcd_command:
000241 bb01                      	out PORTF, temp1					;Port F is LCD data, temp1 sent to LCD
000242 d01f                      	rcall sleep_1ms
000243 9a16                      	lcd_set LCD_E					;Enable bit set so it does the command
000244 d01d                      	rcall sleep_1ms
000245 9816                      	lcd_clr LCD_E					;Enable bit cleared
000246 d01b                      	rcall sleep_1ms
000247 9508                      	ret
                                 
                                 lcd_data:
000248 bb01                      	out PORTF, temp1					;temp1 contains the data being outputted
000249 9a17                      	lcd_set LCD_RS					; Set top bit (bit 7) of LCD Control (Port A) 
                                 									; this determines read/ write to the LCD
00024a d017                      	rcall sleep_1ms					;wait ... LCD is slow
00024b 9a16                      	lcd_set LCD_E					;Set bit 6
00024c d015                      	rcall sleep_1ms
00024d 9816                      	lcd_clr LCD_E
00024e d013                      	rcall sleep_1ms
00024f 9817                      	lcd_clr LCD_RS
000250 9508                      	ret
                                 
                                 lcd_wait:
000251 930f                      	push temp1
000252 2700                      	clr temp1
000253 bb00                      	out DDRF, temp1
000254 bb01                      	out PORTF, temp1
000255 9a15                      	lcd_set LCD_RW
                                 
                                 lcd_wait_loop:
000256 d00b                      	rcall sleep_1ms
000257 9a16                      	lcd_set LCD_E
000258 d009                      	rcall sleep_1ms
000259 b10f                      	in temp1, PINF
00025a 9816                      	lcd_clr LCD_E
00025b fd07                      	sbrc temp1, 7
00025c cff9                      	rjmp lcd_wait_loop
00025d 9815                      	lcd_clr LCD_RW
00025e ef0f                      	ser temp1
00025f bb00                      	out DDRF, temp1
000260 910f                      	pop temp1
000261 9508                      	ret
                                 
                                 ; Delay commands
                                 
                                 sleep_1ms:
000262 938f                      	push r24
000263 939f                      	push r25
000264 e09f                      	ldi r25, high(DELAY_1MS)
000265 e98c                      	ldi r24, low(DELAY_1MS)
                                 
                                 delayloop_1ms:
000266 9701                      	sbiw r25:r24, 1
000267 f7f1                      	brne delayloop_1ms
000268 919f                      	pop r25
000269 918f                      	pop r24
00026a 9508                      	ret
                                 
                                 
                                 sleep_5ms:
00026b dff6                      	rcall sleep_1ms
00026c dff5                      	rcall sleep_1ms
00026d dff4                      	rcall sleep_1ms
00026e dff3                      	rcall sleep_1ms
00026f dff2                      	rcall sleep_1ms
000270 9508                      	ret
                                 
                                 
                                 sleep_20ms:
000271 dff9                      	rcall sleep_5ms
000272 dff8                      	rcall sleep_5ms
000273 dff7                      	rcall sleep_5ms
000274 dff6                      	rcall sleep_5ms
000275 dff5                      	rcall sleep_5ms
000276 9508                      	ret
                                 
                                 get_item:
000277 930f                      	push temp1
000278 e0d2                      	ldi YH, high(Item1)
000279 e0c6                      	ldi YL, low(Item1)
00027a 2d0b                      	mov temp1, current_item
                                 	get_item_loop:
00027b 3000                      		cpi temp1, 0
00027c f021                      		breq end_item_count
00027d 90d9                      		ld tempcount, Y+	
00027e 90e9                      		ld tempcost, Y+
00027f 950a                      		dec temp1
000280 cffa                      		rjmp get_item_loop
                                 	end_item_count:
000281 910f                      		pop temp1
000282 9508                      		ret
                                 
                                 set_item:
000283 930f                      	push temp1
000284 931f                      	push temp2
                                 
000285 e0d2                      	ldi YH, high(Item1)
000286 e0c6                      	ldi YL, low(Item1)
000287 2d0b                      	mov temp1, current_item
                                 	set_item_loop:
000288 3001                      		cpi temp1, 1
000289 f021                      		breq end_item_set
00028a 9119                      		ld temp2, Y+
00028b 9119                      		ld temp2, Y+
00028c 950a                      		dec temp1
00028d cffa                      		rjmp set_item_loop
                                 	end_item_set:
00028e 92d9                      		st Y+, tempcount
00028f 92e9                      		st Y+, tempcost
000290 911f                      		pop temp2
000291 910f                      		pop temp1
000292 9508                      		ret
                                 
                                 
                                 
                                 
                                 
                                 	
                                 
                                 
                                 ;SCREENS--------------------------------------------------------------------------------------------
                                 
                                 ;Start Screen------------------
                                 ;should show 2121 17s1 (dunno what our group name is) then next line Vending Machine
                                 ;Then 3 seconds later, or until any keypad button is pressed should go to select screen
                                 start_screen:
000293 e060                      	ldi current_screen, 0
000294 e071                      	ldi new_screen_flag, 1
000295 e302
000296 dfb1
000297 dfb9                      	do_lcd_data '2'
000298 e301
000299 dfae
00029a dfb6                      	do_lcd_data '1'
00029b e302
00029c dfab
00029d dfb3                      	do_lcd_data '2'
00029e e301
00029f dfa8
0002a0 dfb0                      	do_lcd_data '1'
0002a1 e200
0002a2 dfa5
0002a3 dfad                      	do_lcd_data ' '
0002a4 e301
0002a5 dfa2
0002a6 dfaa                      	do_lcd_data '1'
0002a7 e307
0002a8 df9f
0002a9 dfa7                      	do_lcd_data '7'
0002aa e703
0002ab df9c
0002ac dfa4                      	do_lcd_data 's'
0002ad e301
0002ae df99
0002af dfa1                      	do_lcd_data '1'
0002b0 e200
0002b1 df96
0002b2 df9e                      	do_lcd_data ' '
0002b3 e200
0002b4 df93
0002b5 df9b                      	do_lcd_data ' '
0002b6 e200
0002b7 df90
0002b8 df98                      	do_lcd_data ' '
0002b9 e200
0002ba df8d
0002bb df95                      	do_lcd_data ' '
0002bc e40d
0002bd df8a
0002be df92                      	do_lcd_data 'M'
0002bf e302
0002c0 df87
0002c1 df8f                      	do_lcd_data '2'
0002c2 ea08
0002c3 df7d
0002c4 df8c                      	do_lcd_command LCD_SEC_LINE
0002c5 e506
0002c6 df81
0002c7 df89                      	do_lcd_data 'V'
0002c8 e605
0002c9 df7e
0002ca df86                      	do_lcd_data 'e'
0002cb e60e
0002cc df7b
0002cd df83                      	do_lcd_data 'n'
0002ce e604
0002cf df78
0002d0 df80                      	do_lcd_data 'd'
0002d1 e609
0002d2 df75
0002d3 df7d                      	do_lcd_data 'i'
0002d4 e60e
0002d5 df72
0002d6 df7a                      	do_lcd_data 'n'
0002d7 e607
0002d8 df6f
0002d9 df77                      	do_lcd_data 'g'
0002da e200
0002db df6c
0002dc df74                      	do_lcd_data ' '
0002dd e40d
0002de df69
0002df df71                      	do_lcd_data 'M'
0002e0 e601
0002e1 df66
0002e2 df6e                      	do_lcd_data 'a'
0002e3 e603
0002e4 df63
0002e5 df6b                      	do_lcd_data 'c'
0002e6 e608
0002e7 df60
0002e8 df68                      	do_lcd_data 'h'
0002e9 e609
0002ea df5d
0002eb df65                      	do_lcd_data 'i'
0002ec e60e
0002ed df5a
0002ee df62                      	do_lcd_data 'n'
0002ef e605
0002f0 df57
0002f1 df5f                      	do_lcd_data 'e'
0002f2 d002                      	rcall starting_inventory
0002f3 940c 0196                 	jmp keypad_prologue
                                 
                                 starting_inventory:
0002f5 e001                      	ldi temp1, 1
                                 	starting_inventory_loop:		;loop over each item setting inventory as number of items
0002f6 300a                      		cpi temp1, 10
0002f7 f039                      		breq starting_cost
0002f8 2eb0                      		mov current_item, temp1
0002f9 940e 0277                 		call get_item				;tempcount tempcost now have old values of current_item (which is temp1)
0002fb 2ed0                      		mov tempcount, temp1
0002fc df86                      		rcall set_item				;sets tempcount to temp1 of current_item
0002fd 9503                      		inc temp1
0002fe cff7                      		rjmp starting_inventory_loop
                                 
                                 starting_cost:
0002ff e001                      	ldi temp1, 1
                                 	starting_cost_odd_loop:		;loop over each odd numbered item setting cost to 1 coin. Temp1 will be current item to be looked at
000300 300b                      		cpi temp1, 11
000301 f051                      		breq starting_cost_even
000302 2eb0                      		mov current_item, temp1
000303 940e 0277                 		call get_item			;saves old values of count and cost into tempcount tempcost
000305 e011                      		ldi temp2, 1
000306 2ee1                      		mov tempcost, temp2
000307 940e 0283                 		call set_item
000309 9503                      		inc temp1
00030a 9503                      		inc temp1
00030b cff4                      		rjmp starting_cost_odd_loop
                                 starting_cost_even:
00030c e002                      	ldi temp1, 2
                                 	starting_cost_even_loop:		;loop over each even numbered item setting cost to 2 coins
00030d 300a                      		cpi temp1, 10
00030e f051                      		breq starting_done
00030f 2eb0                      		mov current_item, temp1
000310 940e 0277                 		call get_item			;saves old values of count and cost into tempcount tempcost
000312 e012                      		ldi temp2, 2
000313 2ee1                      		mov tempcost, temp2
000314 940e 0283                 		call set_item
000316 9503                      		inc temp1
000317 9503                      		inc temp1
000318 cff4                      		rjmp starting_cost_even_loop
                                 starting_done:
000319 9508                      	ret
                                 
                                 ;Select Screen-----------------
                                 ;Pressing 1-9 should try to retrieve the corresponding item, if in inventory -> coin screen else -> empty screen
                                 select_screen:
00031a e061                      	ldi current_screen, 1
00031b e001
00031c df24
00031d df33                      	do_lcd_command LCD_DISP_CLR
00031e e800
00031f df21
000320 df30                      	do_lcd_command LCD_HOME_LINE
000321 e503
000322 df25
000323 df2d                      	do_lcd_data 'S'
000324 e605
000325 df22
000326 df2a                      	do_lcd_data 'e'
000327 e60c
000328 df1f
000329 df27                      	do_lcd_data 'l'
00032a e605
00032b df1c
00032c df24                      	do_lcd_data 'e'
00032d e603
00032e df19
00032f df21                      	do_lcd_data 'c'
000330 e704
000331 df16
000332 df1e                      	do_lcd_data 't'
000333 e200
000334 df13
000335 df1b                      	do_lcd_data ' '
000336 e609
000337 df10
000338 df18                      	do_lcd_data 'i'
000339 e704
00033a df0d
00033b df15                      	do_lcd_data 't'
00033c e605
00033d df0a
00033e df12                      	do_lcd_data 'e'
00033f e60d
000340 df07
000341 df0f                      	do_lcd_data 'm'
                                 
000342 940c 0196                 	jmp keypad_prologue
                                 	;all handling in button areas
                                 
                                 
                                 ;Empty Screen-----------------
                                 ;display Out of Stock with number of item trying to be retrieved on the second line
                                 ;Stay in state for 3 seconds before returning to select screen
                                 ;All 10 LEDS should be on for the first half of the 3 seconds then off for the second half
                                 empty_screen:
000344 e062                      	ldi current_screen, 2
000345 e071                      	ldi new_screen_flag, 1
000346 e001
000347 def9
000348 df08                      	do_lcd_command LCD_DISP_CLR
000349 e800
00034a def6
00034b df05                      	do_lcd_command LCD_HOME_LINE
00034c e40f
00034d defa
00034e df02                      	do_lcd_data 'O'
00034f e705
000350 def7
000351 deff                      	do_lcd_data 'u'
000352 e704
000353 def4
000354 defc                      	do_lcd_data 't'
000355 e200
000356 def1
000357 def9                      	do_lcd_data ' '
000358 e60f
000359 deee
00035a def6                      	do_lcd_data 'o'
00035b e606
00035c deeb
00035d def3                      	do_lcd_data 'f'
00035e e200
00035f dee8
000360 def0                      	do_lcd_data ' '
000361 e703
000362 dee5
000363 deed                      	do_lcd_data 's'
000364 e704
000365 dee2
000366 deea                      	do_lcd_data 't'
000367 e60f
000368 dedf
000369 dee7                      	do_lcd_data 'o'
00036a e603
00036b dedc
00036c dee4                      	do_lcd_data 'c'
00036d e60b
00036e ded9
00036f dee1                      	do_lcd_data 'k'
000370 ea08
000371 decf
000372 dede                      	do_lcd_command LCD_SEC_LINE
                                 
000373 2d0b                      	mov temp1, current_item
000374 d162                      	rcall write_digits		;write out current_item
                                 	empty_loop:
000375 dfff                      		rcall empty_loop		;loop until timers send back to select_screen
                                 
                                 ;Coin Screen----------------
                                 coin_screen:
000376 e063                      	ldi current_screen, 3
000377 940e 0277                 	call get_item
000379 2c9e                      	mov coins_needed, tempcost
                                 	coin_screen_update:
00037a e001
00037b dec5
00037c ded4                      	do_lcd_command LCD_DISP_CLR
00037d e800
00037e dec2
00037f ded1                      		do_lcd_command LCD_HOME_LINE
000380 e409
000381 dec6
000382 dece                      		do_lcd_data 'I'
000383 e60e
000384 dec3
000385 decb                      		do_lcd_data 'n'
000386 e703
000387 dec0
000388 dec8                      		do_lcd_data 's'
000389 e605
00038a debd
00038b dec5                      		do_lcd_data 'e'
00038c e702
00038d deba
00038e dec2                      		do_lcd_data 'r'
00038f e704
000390 deb7
000391 debf                      		do_lcd_data 't'
000392 e200
000393 deb4
000394 debc                      		do_lcd_data ' '
000395 e603
000396 deb1
000397 deb9                      		do_lcd_data 'c'
000398 e60f
000399 deae
00039a deb6                      		do_lcd_data 'o'
00039b e609
00039c deab
00039d deb3                      		do_lcd_data 'i'
00039e e60e
00039f dea8
0003a0 deb0                      		do_lcd_data 'n'
0003a1 e703
0003a2 dea5
0003a3 dead                      		do_lcd_data 's'
0003a4 ea08
0003a5 de9b
0003a6 deaa                      		do_lcd_command LCD_SEC_LINE
0003a7 2d09                      		mov temp1, coins_needed
                                 
0003a8 d12e                      		rcall write_digits    		;write intial tmp cost
                                 
0003a9 940c 0196                 		jmp keypad_prologue			;check for # to be pressed
                                      
                                 		EXT_INT2:										;dealing with the potentiometer
0003ab 930f                      		    push temp1
                                 			
0003ac 949a                      		    dec coins_needed
                                 		    ;mov temp1, coins_needed
                                 		    ;rcall write_digits
0003ad e000                      			ldi temp1, 0
0003ae 1690                      		    cp coins_needed, temp1
0003af f011                      		    breq go_deliver_screen
0003b0 910f                      			pop temp1
0003b1 cfc8                      			rjmp coin_screen_update
                                 
                                 			go_deliver_screen:
0003b2 910f                      				pop temp1
0003b3 940c 03c0                 				jmp deliver_screen
                                 		
                                 		CoinRet:
0003b5 930f                      		    push temp1
0003b6 929f                      		    push coins_needed
                                 
                                 			CoinRetLoop:
0003b7 9493                      		    inc coins_needed
0003b8 d041                      			rcall startMotor
0003b9 149e                      			cp coins_needed, tempcost
0003ba f009                      			breq EndCoinRet
0003bb cffb                      			rjmp CoinRetLoop
                                 			
                                 		    	EndCoinRet:
0003bc 909f                      		    	    pop coins_needed 
0003bd 910f                      		    	    pop temp1
0003be 940c 031a                 					jmp select_screen
                                 
                                 ;Deliver Screen
                                 deliver_screen:
0003c0 e064                      	ldi current_screen, 4
0003c1 e071                      	ldi new_screen_flag, 1
0003c2 e001
0003c3 de7d
0003c4 de8c                      	do_lcd_command LCD_DISP_CLR
0003c5 e800
0003c6 de7a
0003c7 de89                      		do_lcd_command LCD_HOME_LINE
0003c8 e404
0003c9 de7e
0003ca de86                      		do_lcd_data 'D'
0003cb e605
0003cc de7b
0003cd de83                      		do_lcd_data 'e'
0003ce e60c
0003cf de78
0003d0 de80                      		do_lcd_data 'l'
0003d1 e609
0003d2 de75
0003d3 de7d                      		do_lcd_data 'i'
0003d4 e706
0003d5 de72
0003d6 de7a                      		do_lcd_data 'v'
0003d7 e605
0003d8 de6f
0003d9 de77                      		do_lcd_data 'e'
0003da e702
0003db de6c
0003dc de74                      		do_lcd_data 'r'
0003dd e609
0003de de69
0003df de71                      		do_lcd_data 'i'
0003e0 e60e
0003e1 de66
0003e2 de6e                      		do_lcd_data 'n'
0003e3 e607
0003e4 de63
0003e5 de6b                      		do_lcd_data 'g'
0003e6 e200
0003e7 de60
0003e8 de68                      		do_lcd_data ' '
0003e9 e409
0003ea de5d
0003eb de65                      		do_lcd_data 'I'
0003ec e704
0003ed de5a
0003ee de62                      		do_lcd_data 't'
0003ef e605
0003f0 de57
0003f1 de5f                      		do_lcd_data 'e'
0003f2 e60d
0003f3 de54
0003f4 de5c                      		do_lcd_data 'm'
                                 		
0003f5 c004                      		rjmp startMotor
0003f6 2700                      		clr temp1
0003f7 9300 0200                 		sts TempCounter, temp1
0003f9 c01d                      		rjmp Timer1OVF
                                 
                                 ;Motor Control -------------------------------------------------
                                 
                                 startMotor:
0003fa 930f                      	push temp1
                                 	
                                 
0003fb e001                      	ldi temp1, (1 << TOIE1) 							; enable timer
0003fc 9300 006e                 	sts TIMSK0, temp1
0003fe ef0f                      	ldi temp1, low(0xFF)						; start motor
0003ff 9300 0099                 	sts OCR3AH, temp1
000401 e000                      	ldi temp1, high(0xFF)
000402 9300 0098                 	sts OCR3AL, temp1
                                 
000404 e071                      	ldi new_screen_flag, 1
000405 e0c2
000406 e0d2
000407 2700
000408 9309
000409 8308                      	clear TempCounter1
                                 	
00040a 910f                      	pop temp1
00040b 9508                      	ret
                                 
                                 stopMotor:
00040c 930f                      	push temp1
                                 	
00040d e000                      	ldi temp1, (0 << TOIE1) 							; disable timer
00040e 9300 006e                 	sts TIMSK0, temp1
000410 2700                      	clr temp1										; stop motor
000411 9300 0099                 	sts OCR3AH, temp1
000413 9300 0098                 	sts OCR3AL, temp1
                                 	
000415 910f                      	pop temp1
000416 9508                      	ret
                                 
                                 Timer1OVF:						; interrupt subroutine to Timer1
000417 930f                      	push temp1
000418 b70f                      	in temp1, SREG
000419 930f                      	push temp1 					; save conflict registers
00041a 939f                      	push r25
00041b 938f                      	push r24
                                 
00041c 9180 0202                 	lds r24, TempCounter1 		; load value of temporary counter
00041e 9190 0203                 	lds r25, TempCounter1 + 1
000420 9601                      	adiw r25:r24, 1 			; increase temporary counter by 1
                                 	
                                 	
000421 3064                      	cpi current_screen, 4
000422 f011                      		breq deliver_timer
                                 
000423 3063                      	cpi current_screen, 3
000424 f121                      		breq coin_timer
                                 	
                                 	
                                 	deliver_timer:
000425 3071                      		cpi new_screen_flag, 1	;if screen has just been changed to start screen then start a new timer
000426 f051                      		breq new_deliver_timer
                                 
000427 3c86                      		cpi r24, low(11718)		;check to see if 1.5 seconds has passed
000428 e20d                      		ldi temp1, high(11718)
000429 0790                      		cpc r25, temp1
00042a f469                      		brne NotHalfThree
                                 		
00042b 388c                      		cpi r24, low(23436)	
00042c e59b                      		ldi r25, high(23436)
00042d 0790                      		cpc r25, temp1			;check to see if 3 seconds has passed
00042e f491                      		brne NotThree
00042f dfdc                      		rcall stopMotor
000430 c035                      		rjmp END
                                 
                                 		new_deliver_timer:
000431 e070                      			ldi new_screen_flag, 0	;not a new screen anymore
000432 e0c2
000433 e0d2
000434 2700
000435 9309
000436 8308                      			clear TempCounter1	;start 'new' timer
000437 c02e                      			rjmp END
                                 
                                 		NotHalfThree:
000438 ef0f                      			ser temp1
000439 b908                      			out PORTC, temp1		;turn on all port C LEDs
00043a e300                      			ldi temp1, 0b00110000
00043b bb04                      			out PORTG, temp1		;turn on the 2 port G LEDs
00043c 9380 0202                 			sts TempCounter1, r24	;Store the new value of the temporary counter
00043e 9390 0203                 			sts TempCounter1+1, r25
000440 c025                      			rjmp END
                                 			
                                 		NotThree:
000441 2700                      			clr temp1				;if 3 seconds has passed turn off leds and go back to select screen
000442 b908                      			out PORTC, temp1
000443 bb04                      			out PORTG, temp1
000444 9380 0202                 			sts TempCounter1, r24
000446 9390 0203                 			sts TempCounter1+1, r25
000448 c01d                      			rjmp END
                                 	
                                 	  coin_timer:
000449 3071                      		cpi new_screen_flag, 1	;if screen has just been changed to start screen then start a new timer
00044a f051                      		breq new_coin_timer
                                 
00044b 3a81                      		cpi r24, low(1953)		;check to see if 0.25 seconds has passed
00044c e007                      		ldi temp1, high(1953)
00044d 0790                      		cpc r25, temp1
00044e f469                      		brne NotQuarterSecond
                                 		;0.25 seconds has passed
00044f dfbc                      		rcall stopMotor
                                 		
000450 338e                      		cpi r24, low(3902)	
000451 e09f                      		ldi r25, high(3902)
000452 0790                      		cpc r25, temp1			;check to see if 0.5 seconds has passed
000453 f469                      		brne NotHalfSecond
000454 c011                      		rjmp END
                                 		
                                 
                                 		new_coin_timer:
000455 e070                      			ldi new_screen_flag, 0	;not a new screen anymore
000456 e0c2
000457 e0d2
000458 2700
000459 9309
00045a 8308                      			clear TempCounter1	;start 'new' timer
00045b c00a                      			rjmp END
                                 
                                 		NotQuarterSecond:
00045c 9380 0202                 			sts TempCounter1, r24	;Store the new value of the temporary counter
00045e 9390 0203                 			sts TempCounter1+1, r25
000460 c005                      			rjmp END
                                 			
                                 		NotHalfSecond:
000461 9380 0202                 			sts TempCounter1, r24
000463 9390 0203                 			sts TempCounter1+1, r25
000465 c000                      			rjmp END
                                 	
                                 	END:
000466 918f                      		pop r24
000467 919f                      		pop r25
000468 910f                      		pop temp1
000469 bf0f                      		out SREG, temp1
00046a 910f                      		pop temp1
00046b 9518                      		reti 	
                                 
                                 
                                 ;Admin Screen
                                 admin_screen:
00046c e065                      	ldi current_screen, 5
00046d e001                      	ldi temp1, 1
00046e 2eb0                      	mov current_item, temp1		;default item selected is 1. temp1 will hold item selected
                                 	update_admin_screen:
00046f e001
000470 ddd0
000471 dddf                      		do_lcd_command LCD_DISP_CLR
000472 e800
000473 ddcd
000474 dddc                      		do_lcd_command LCD_HOME_LINE
000475 e401
000476 ddd1
000477 ddd9                      		do_lcd_data 'A'
000478 e604
000479 ddce
00047a ddd6                      		do_lcd_data 'd'
00047b e60d
00047c ddcb
00047d ddd3                      		do_lcd_data 'm'
00047e e609
00047f ddc8
000480 ddd0                      		do_lcd_data 'i'
000481 e60e
000482 ddc5
000483 ddcd                      		do_lcd_data 'n'
000484 e200
000485 ddc2
000486 ddca                      		do_lcd_data ' '
000487 e60d
000488 ddbf
000489 ddc7                      		do_lcd_data 'm'
00048a e60f
00048b ddbc
00048c ddc4                      		do_lcd_data 'o'
00048d e604
00048e ddb9
00048f ddc1                      		do_lcd_data 'd'
000490 e605
000491 ddb6
000492 ddbe                      		do_lcd_data 'e'
000493 e200
000494 ddb3
000495 ddbb                      		do_lcd_data ' '
000496 2d0b                      		mov temp1, current_item
000497 d03f                      		rcall write_digits	;prints item number stored in temp1
000498 ea08
000499 dda7
00049a ddb6                      		do_lcd_command LCD_SEC_LINE
00049b 940e 0277                 		call get_item
00049d 2d0d                      		mov temp1, tempcount
00049e 940e 04d7                 		call write_digits
0004a0 d020                      		rcall show_inventory
0004a1 e200
0004a2 dda5
0004a3 ddad                      		do_lcd_data ' '
0004a4 e200
0004a5 dda2
0004a6 ddaa                      		do_lcd_data ' '
0004a7 e200
0004a8 dd9f
0004a9 dda7                      		do_lcd_data ' '
0004aa e200
0004ab dd9c
0004ac dda4                      		do_lcd_data ' '
0004ad e200
0004ae dd99
0004af dda1                      		do_lcd_data ' '
0004b0 e200
0004b1 dd96
0004b2 dd9e                      		do_lcd_data ' '
0004b3 e200
0004b4 dd93
0004b5 dd9b                      		do_lcd_data ' '
0004b6 e200
0004b7 dd90
0004b8 dd98                      		do_lcd_data ' '			;TODO chech how long lcd line is
0004b9 e204
0004ba dd8d
0004bb dd95                      		do_lcd_data '$'
0004bc 2d0e                      		mov temp1, tempcost
0004bd 940e 04d7                 		call write_digits
0004bf 940c 0196                 		jmp keypad_prologue		;check for button pushing
                                 
                                 		show_inventory:		;Function to show inventory on leds
0004c1 2711                      			clr temp2			;temp2 will be what to be shown on leds
0004c2 2d0d                      			mov temp1, tempcount	
0004c3 3009                      			cpi temp1, 9		;check to see if need to show on PORTG LEDs as well
0004c4 f050                      			brlo show_inventory_C_loop
0004c5 f029                      			breq show_9
0004c6 e008                      			ldi temp1, 8		;else must be 10 and have 8 remaining leds to show on PORTC
0004c7 e310                      			ldi temp2, 0b00110000	;show both PORTG LEDs
0004c8 bb14                      			out PORTG, temp2	
0004c9 2711                      			clr temp2
0004ca c004                      			rjmp show_inventory_C_loop
                                 			show_9:
0004cb e008                      				ldi temp1, 8
0004cc e110                      				ldi temp2, 0b00010000	;show just one PORTG LED TODO not sure if this is right one
0004cd bb14                      				out PORTG, temp2
0004ce 2711                      				clr temp2
                                 			show_inventory_C_loop:
0004cf 3000                      				cpi temp1, 0
0004d0 f021                      				breq show_inventory_done
0004d1 0f11                      				lsl temp2
0004d2 6011                      				ori temp2, 0b00000001
0004d3 950a                      				dec temp1
0004d4 cffa                      				rjmp show_inventory_C_loop
                                 
                                 			show_inventory_done:
0004d5 b918                      				out PORTC, temp2
0004d6 9508                      				ret
                                 				
                                 
                                 		
                                 
                                 write_digits:										; writes value of temp1
0004d7 300a                      	cpi temp1, 10
0004d8 f421                      	brne write_ones
                                 
0004d9 e301
0004da dd6d
0004db dd75                      	do_lcd_data '1'
0004dc 500a                      	subi temp1, 10
                                 
                                 	write_ones:
0004dd 5d00                      		subi temp1, -'0'
0004de 2f00
0004df dd68
0004e0 dd70                      		do_lcd_data_reg temp1
0004e1 9508                      		ret
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :  46 z  :   0 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   3 r9 :   9 r10:   3 r11:  10 r12:   4 
r13:  13 r14:  13 r15:   0 r16: 425 r17:  27 r18:   3 r19:   3 r20:   5 
r21:   5 r22:  21 r23:  12 r24:  42 r25:  45 r26:   0 r27:   0 r28:  22 
r29:  22 r30:   0 r31:   0 
Registers used: 20 out of 35 (57.1%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :   3 and   :   1 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  50 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :  18 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  23 cbi   :   5 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  41 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  11 cpc   :   9 
cpi   :  54 cpse  :   0 dec   :   7 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :  12 jmp   :  34 ld    :   4 ldd   :   0 ldi   : 246 
lds   :   9 lpm   :   0 lsl   :   4 lsr   :   0 mov   :  34 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   3 out   :  36 pop   :  24 push  :  26 rcall : 284 ret   :  13 
reti  :   4 rjmp  :  42 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   4 sen   :   0 ser   :   7 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  42 std   :   0 sts   :  39 sub   :   0 subi  :   2 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 38 out of 116 (32.8%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009c4   2428      0   2428  262144   0.9%
[.dseg] 0x000200 0x00021a      0     26     26    8192   0.3%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
